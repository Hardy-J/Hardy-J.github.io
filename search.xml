<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随笔</title>
    <url>/2020/Essay/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="bc8fb563ff051d442002db15f85cd6af8241223a5927bade16088e9a341684be">91808352c26a895bb40c25d817b98cc156e1c3e68f68621bab971504635dc4e3b21ed11676400326fc5bc68cd998c41f4457738d60ca66bae669b348cc065ac07086e933b6d25b8a1252679961759a0d97acdb740a17030564c676b02ac1e95fae8c8207fda48e6231aa9d40186e3c7ee471f8e119855f6afb847e1fcb71789c221004ad2226448cc87a8b6be0372e9dd139e9ce923dca15a7c7dea1fdb274f4e52b139810f3bfd5f05406bb6f80f97a200078f70ab0af3a931390a00fe9f5a18b9b570d0ffbf64ebb5269fff6086bb7df6042fd49118d2474179b6bef8e06bf1289fa0d03248128f749e05531d96910ad95e8080f50a9ba1fe173e6311fc639bcf883bbeefb7c5750ee684257b2dfec7987fef7002deb16e33d5d4657f42244c8dadc3112113e57773ccef0fd2531f3d0941f73810c2bb0b7996c5cf5816ddc1bf24a4b895535e0e5c9e06eccdbaecb5fb883dbe149fe1eff380c552295f7ed955ed6e7b74d5b807ccaa9240a9359687743d5f0f4923933fbf6fba01e0cb5a5cda054d38b7949726f76e3ad76715f1aae7311987006013e632a4e104cc50bc8125ff888de41f1a7b40090c88530a1c7836633d01eeba5f5a1be3cbe7203f175fe1d04745b622eacf3be599596a0d97cf6b625624ae3f12a4dcbd11b7d1de50793fad998e850e0d9f9ae311b6305a9813c7ed5723bcd5acc3f43cedbbf1df8d926298ae85a0781b3fe86dd051f4cf8ab3d55524c333296a7c3e3fc433167d538ff30d47781253075181646a5f9471d1c7d707b7d683952a967bd7a67f065bd98f6fd88ac75cd55ef3efb37fbcf00a126dd6b1a164f40dec7ce59a9e139f9d4073eeda2f146fd52857c4e35a02167ac498a5484f7066ad05b458757b39dfb7499ca9e25f6280268d9dd355d0ada6aced2ec38eb53af24c0d21a477c4a9e7ffb5af2552c86552369d25c40b8a8d05de081d927f4702bf14c44e239e5c0475481000460834808f888963d976d66b1ee63dd3d20bdcc09b8f513b7d33acffb80c36d63b6a8f296f121f6e20df64442198d9cfa41470474f3533ee888f0c7699cdde77a4942444c0c2702f6cd64cfe181704b626b964b32bf47adbaa2519d9331ec55e12a81ebd1bc20e4a8dc1fd998f0d9c0d6142773a694f8a4f087d87a8727077948e66bdccd64099baabebbf7555b3c93679d3ddb79343e3b8c9b23b8e21931ce56ebe97f8d9fe7fef3b4cde8c23b09999c1e8f7ed08f62b4d1001fab29648102b3c3a6c9558f07935d27650702d9f14bbc3ffc5aec20da1c4d9a97813d486f4ece80efe2846be21845f647b8d8d861d52d1742f734c3e8132142ea383de90f2df8d46209c8489369317ee3ac340a49bcdb81c8891e6b878c7375302587c261273322c60b883fe9a3b56f08af08f7084259f6ee3ebd8640bc0f3d5fe4d610b70c0176c8026fc917bbddac31a8d2082bec38da54466f13912de24eb20ed71d07d4353d1d3c020ba7cee139efc8c6a3d7896535eb2513b3ba30013751e09e43f74b7880a33cb1f832c897768003cea8badab783edc1d7926b622b5edf5353f578fd2a1070769360eac4b95c5b1789c9c15e33f0e9c1a5e6e29b15c4ed1136cc4949296433ddfa3c13e6f9b9994ae7c8fe1d0917b49d21408f73465a95ed3f873817c57d003bc03cb4f65b0626a5790fc04a2aa44fe2de032b24d30ed73d66f329a95b07b52e45986e65ec6e28fabf5113e119ac4c4cbcdf27d9faf9ad4a5db67ca46353bea03a2f1268c6e89a31e330128204a024a71f304df01832d88631125bb7c15988fc2085c824f9944c5c04c1020e837bebc85f5312c3fe78dd138ed4d4d5d83ba06691fb77272a68e8fd65f2f3c9eec66e0b5e90bd84785efb9fd23d7cb10b43683b9b88713231f148f16e7e2b63e5a189dd9195d2fd6844629a5ae8f0baf8815de2d7a46284e0b8d86547c456c8c0824019fdba5abdaa32f32ff7017ea676f651a8476d5e64a117d1b03e075bb86ada77606dd63e85148cfdeb3a426e7eeb3f69fcaa827e6e878a7ee765780eee364686805c93263244c9a7d309bf58879dddf3da46f892fb4d53971daaa11a381aa71a2ccedd3e83ccd95edcf9172c046900e9c2230d1b55df40274e1f1eeff3a43a51eceaff4360dcab0b43012204e62aed1e718face3d6e4cdb03bf55abd2aa50881011f4fa10846f7f0ca0821936c10c57c49b06517d9c5d965049f8e66857bf700e699a74b6e887bbb7466a474ed3d839365aa05022481728aeacfe0f3b4f08d6b300ed2ff49bdc02ab32c8c598b2b824d56eb304b15cd2c392b929c83d0df2c6bbb20e7a54cd3b8ad6fe2f98163b7b31d7a8db299401861457a4da8a28af2062a2b1b57e1fd58e1444a5af5084fb18b7cd4ad13ed30d87f61bca7142d7fccabe33784cfafbb2629a26bc05ba16285d7a537cbaef88ef6bc2d1a0e2caffc7aa80c4059a2c2763c77ba438e8dcd76ec12587d3e6fed4b0657dc31a3c3fcd087b6225a2b98509e8717a08cb8e67eec294222e373b397a5d7694fbbb74a6b021c9a39bd7af08df18c9bb19c9f755536a62a5db98e85a71e87cee82a9f464c995403309d0bbc0418654d9933218a64bcbd746dd46450a21ba4d8b91479b39f1eba448f882554f1fae7fcaa7aa5d389c1b14c7d48787256e09edd5235b2cd02a2d8ecbe66f999a33a3aacb5fe144746bab11b2384e448d4b0e86a98b0d07d9ed38e685c3de970abfbe920db34fe62950d2071331fa96426e7882465a6e7b6a491ef77883ebb023be8ab022fa5c45197f148b653ff1422b546492d752e693575a4a882bddbcec80d6accfa931b107565dd1ef9bf29ae9e98c74c7fd8dcc2274d5e35f48e8dd59180db70b4fae112c273f6f4951976d5f05372651042bfa6e4a6ac1ef90eebd8fbd36fd68a1b70554bc341e3ca76b96795bf597d5d62dec4f92fd2b2f25e2a4b4f645f45719b9f40dc9367b530b3604fefab569ef9f2c40281bd87f51d206847c7973e8c7f3f60e53b37145d6dafab7b3dcec1e693a400f4b2e7546c4845f7b32a16100bc8a8dba753e5309ce3448e32bf375c640f40272d47d259503d6add777d1ecbfa49bade9a207cf8177dabef659f4618c9009c09fc067b9c2712dfc15cc30d50769f3504752bbbae871809559b1aeca18140e9acf166f9a2f17e243d076bc0b0d95dd87fb59788a83296ad83eb145b405079a6808b8a6e3e241d6c17ec5ac56e8ece5564c7a01241fa3fa74542e24b54ff7f7fa4bc4e7c51976800914b1760484265b7fddf5f8116eb2914acb41a77e1416fb383a22bec5a465c30463d94a42ec8f0ef4d6446413f75f06c1ca7f8f7042c563edb78a40f241e50c37845225c3f083fff4199a51e9078cf26e913de911ce14592793b9077ed35ea79fd81a13c5f67dd5daea0de3a62f74b92c85c8580fd2a11d367096dcb7ab9336413c7412c639407255c59d78387b5fea03af825714488e6095f59a2dace20cd696fb89fc9ff925d0f9d10b490033cd976f0c6c341baece16d21a77793d7656cff02f8b62a4c32acbfbeac4588b34ecd3d0b41c74c3c9d063f9e7513e9140e2a46bd4f3ffe92e8859b1513f8fabfa9484cf789dcf0b7fbf45d9b4c960327b44b039858066ee4d953bad29ec1a073833d4eff04cdacef74ee7d64812ba3aa6ee05b25fb3135c77ec6d00e8ec5e723b4525d39a024db8e4c22e3e57a8a30c75974828b5bc625c6d2e424c9013273395ae3167d799d2c851b8475a6f66665dfd16ede3ddd7c1e5732a12fef317e14c3d6bafaffb797182be4764437b767df0be7843ebc9042ec3e2d31b44dc15a444ba5d767675b0bc8a3487fe2f40568548b29d6c3ab23e223d7eeb0ceb33531e10e31e4f297bc54cdf6228079bcaf756e6e95a70759d40e5c0e278b8666805a85762467b7ad6d09211d7ce7d3f8b9aa6d00e4f0ae678817cb1dec160f9a7d625fb5d7ef763b7216c89a0c0eee3be08c79218a3f8725eb117e6d1701901fc86cf091940add6a0828a489dba71b956afc8a70c06a2b0abf3806db3ca425efda661eda3bc4677a44ad983690d4f3c5782f7d6c01238076648d976826a2771fab78f5ba05454e02986a940c9f1bb5e08a58864d77f67c2b984d7e7075731df63920700e1584918d4d1f1fb768add61d82d770c2dc912b187f1ed7c3078daff29ab3bd3d1311a5260a216099dd258d0836fde97b8277d96fb6b1ea52708ee85e91b6483fd7276134bbae1e82ce1d812fe2dc1f9d32081977927b0d85903f5dc9d74e00914eed5adbdb011dd1a1cb03dfa8b875cf8e7ae04403c2e5c4aacf8e5446e2482261fb3f4ea083ae8cc719ff691bb7101d3c6daf9bcde411bf61e842962a011ab1f79fa2eccde9ba9b0f4073576735b0854a0454f26f6398b09591bf812d5dfe5c5003de31bf551d3487ee4d6383e442cf2532e0ec8bb466ad3309b4d2734e218a52997e9f40cb8e3030d1e253886353aff8ddeed5d1faef32c9d7a70258377cf961efc2c0d69a156039183392f78bc17e5a865282cc2e89082a774857bc2cafd9be100633430e043af3d7966149ce3efbb086f194ac2c55ffa6e946f2e63908609599811e06bdb5c5c41899d38a27c97247979d98c54c9f6a4e12773f6fc26f1fc8a9170b339e81ebbb5132cef82ca5dd6ab29789bdd5d50b4d489a1daafd8d5478ca7ea7e50b80bd8a897b56d57eb443b04e94b1afe115b7d3a8886fa09a448dbf0ab847aaf7dbab52eaa177527c307947e0a07505ca6eede4cc83c4d0330cf3c06a2339e968a0ae91d93af200a806531aa3c205842a8335f371d183133f49b96e58ca22dace60bdf7fc807be738008d75ec8c4eea6984e6a9e58711bc7a9eb7</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>article</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>《人生第一次》观后感</title>
    <url>/2020/life/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7820694615e623852cb36b1023f642c83e41b9843a76d6283f764b454c304d6d"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>article</tag>
        <tag>观后感</tag>
      </tags>
  </entry>
  <entry>
    <title>云开发部署静态网站</title>
    <url>/2020/Cloud/</url>
    <content><![CDATA[<p> 之前有运用 Hexo 建立静态博客系统 ，  除了在 Github Pages 部署以外，现在尝试了一个新的选择，那就是使用云开发静态网站功能来部署！ </p>
<a id="more"></a>

<h2 id="云开发简介"><a href="#云开发简介" class="headerlink" title="云开发简介"></a>云开发简介</h2><p> <strong>云开发（CloudBase）</strong>  是腾讯云提供的一款云端一体化的产品方案 ，采用 serverless 架构，免环境搭建等运维事务 ， 同时云开发提供的静态托管、命令行工具（CLI）、Flutter SDK 等能力极大的降低了应用开发的门槛。使用云开发可以快速构建完整的小程序/小游戏、H5、Web、移动 App 等应用。  </p>
<p>其主要特点：</p>
<ol>
<li>高效安全： Serverless 前后端一体化开发模式、免运维；通过安全认证，稳定可靠有保障 </li>
<li>节约成本： 资源伸缩，弹性扩缩容，灵活计费，极大节约资源成本 </li>
<li>丰富能力： 连接微信 150+ 的云调用开放能力，腾讯云技术能力，以及数家 SaaS 厂商能力，开箱即用 </li>
<li>多端支持： 不仅支持小程序，也提供了丰富的 SDK，包括小程序、Web、移动端支持；各类应用可快速接入 </li>
</ol>
<p>云开发静态网站托管支持通过云开发SDK调用服务端资源如：云函数、云存储、云数据库等，从而将静态网站扩展为全栈网站 。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="系统依赖"><a href="#系统依赖" class="headerlink" title="系统依赖"></a><strong>系统依赖</strong></h4><p>在进行后续的内容前，请先确保你的电脑中安装了 Node.js 运行环境。如果没有安装，可以访问 nodejs.org  下载安装。</p>
<h4 id="安装云开发-cli-工具"><a href="#安装云开发-cli-工具" class="headerlink" title="安装云开发 cli 工具"></a>安装云开发 cli 工具</h4><p>命令行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g @cloudbase&#x2F;cli</span><br></pre></td></tr></table></figure>

<h4 id="创建一个云开发环境"><a href="#创建一个云开发环境" class="headerlink" title="创建一个云开发环境"></a>创建一个云开发环境</h4><p>打开<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">云开发官网</a>在产品中找到云开发</p>
<p><img src="https://pic.downk.cc/item/5e8321d6504f4bcb0428dc38.png" alt=""></p>
<p> 进入到云开发的管理控制台，点击新建环境，新建一个环境来进行部署 </p>
<p><img src="https://pic.downk.cc/item/5e832299504f4bcb04296b07.png" alt=""></p>
<p> 新建一个环境，环境名称可自主定义，并选择按量计费，开通环境 （可不用选取开启免费资源）</p>
<p><img src="https://pic.downk.cc/item/5e832329504f4bcb0429e9fa.png" alt=""></p>
<p> 创建后，等初始化完成（大概三分钟）后，刷新页面，点击环境，进入到环境的管理页面。点击左侧菜单栏中的<strong>「网站托管」</strong> </p>
<p><img src="https://pic.downk.cc/item/5e8324ce504f4bcb042b4748.png" alt=""></p>
<p> 并在静态网站页面开通功能 </p>
<p><img src="https://pic.downk.cc/item/5e83250d504f4bcb042b74e0.png" alt=""></p>
<p>等待初始化（大约需要3分钟），当你看到这样的界面时，就说明已经开通好了。 </p>
<p><img src="https://pic.downk.cc/item/5e8325a1504f4bcb042be84b.png" alt=""></p>
<h4 id="初始化云开发-Cli"><a href="#初始化云开发-Cli" class="headerlink" title="初始化云开发 Cli"></a><strong>初始化云开发 Cli</strong></h4><p> 完成了云开发环境的配置后， 我们需要初始化一下云开发 cli ，从而实现借助 cli 来上传页面（当然， 也可以通过网页端直接上传，但如果你博客的文章比较多，还是使用 Cli 上传更加方便） </p>
<p> 命令行输入 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcb login</span><br></pre></td></tr></table></figure>

<p>命令行会提醒你需要在网页中授权</p>
<p> 然后再弹出的页面确认授权 </p>
<p><img src="https://pic.downk.cc/item/5e832652504f4bcb042c76d1.png" alt=""></p>
<p> 确认授权后，你会看到控制台输出相应的命令 </p>
<p> 这样，你的云开发 cli 就初始化好了。接下来，就可以进入到最后一个环节，上传部署 Hexo 了。 </p>
<h4 id="将Hexo构建好的文件上传"><a href="#将Hexo构建好的文件上传" class="headerlink" title="将Hexo构建好的文件上传"></a>将Hexo构建好的文件上传</h4><p> 回到你的 Hexo 目录中，进入（使用 Hexo g） 生成的 Public 文件夹， 执行如下命令来进行部署（需要将 EnvID 替换为前面你记下的环境ID） </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcb hosting:deploy .&#x2F; -e EnvID</span><br></pre></td></tr></table></figure>

<p> 稍等片刻，部署完成，接下来就可以预览了。 </p>
<h4 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h4><p> 回到网站托管页面，点击设置，进入设置页面，可以找到默认的的域名，点击域名，就可以看到你刚刚部署的环境啦。 </p>
<p><img src="https://pic.downk.cc/item/5e83286b504f4bcb042e425d.png" alt=""></p>
<p> 比如，我的部署以后是这样的 </p>
<p><img src="https://pic.downk.cc/item/5e8328e5504f4bcb042e9810.png" alt=""></p>
<h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>在创建云环境时，所使用的按量计费，是有一个免费额度的，目前官方的免费额度如下：</p>
<ul>
<li><p>存储下载操作次数：150万/月； </p>
</li>
<li><p>CDN流量：5GB/月； </p>
</li>
<li><p>静态托管流量 5GB/月； </p>
</li>
<li><p>云数据库和云函数也有一定额度免费 </p>
</li>
</ul>
<h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>还有很多想法可以探索：</p>
<ol>
<li>自定义域名</li>
<li>实现自动化部署</li>
<li>尝试部署其他博客框架</li>
<li>more…</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>云开发</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情数据可视化</title>
    <url>/2020/Feiyan/</url>
    <content><![CDATA[<div id="echarts8711" style="width: 95%;height: 400px;margin: 0 auto"></div>
<script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts8711'));
        // 指定图表的配置项和数据
        var option = {
    title: {
        text: "全国疫情变化趋势",
        subtext: "",
        subtextStyle: {
            align: "center",
            baseline: "middle",
            fontSize: 11
        }
    },
    tooltip: {
        trigger: "axis"
    },
    legend: {
        data: ["累计确诊", "治愈", "死亡"]
    },
    toolbox: {
        show: true,
        feature: {
            mark: {
                show: true
            },
            dataView: {
                show: true,
                readOnly: true
            },
            magicType: {
                show: false,
                type: ["line", "bar"]
            },
            restore: {
                show: true
            },
            saveAsImage: {
                show: true
            }
        }
    },
    calculable: true,
    xAxis: [
        {
            type: "category",
            boundaryGap: false,
            data: ["01-24", "01-25", "01-26", "01-27", "01-28", "01-29", "01-30", "01-31", "02-01", "02-02", "02-03", "02-04", "02-05", "02-06", "02-07", "02-08", "02-09", "02-10", "02-11", "02-12", "02-13", "02-14", "02-15", "02-16", "02-17", "02-18", "02-19", "02-20", "02-21", "02-22"],
            name: "日期"
        }
    ],
    yAxis: [
        {
            type: "value",
            name: "人数",
            nameLocation: "end",
            nameTextStyle: {
                align: "right",
                baseline: "middle"
            },
            position: "left"
        }
    ],
    series: [
        {
            name: "累计确诊",
            type: "line",
            data: [1287, 1975, 2744, 4515, 5974, 7736, 9720, 11821, 14411, 17238, 20471, 24363, 28060, 31211, 34598, 37251, 40235, 42708, 44730, 59882, 63932, 66576, 68584, 70635, 72528, 74279, 74675, 75993, 76392, 76846]
        },
        {
            name: "治愈",
            type: "line",
            data: [38, 49, 51, 60, 103, 124, 171, 243, 328, 475, 632, 892, 1153, 1542, 2052, 2651, 3283, 3998, 4742, 5915, 6728, 8101, 9425, 10853, 12561, 14387, 16168, 18266, 20673, 22907]
        },
        {
            type: "line",
            name: "死亡",
            data: [41, 56, 80, 106, 132, 170, 213, 259, 304, 361, 425, 491, 564, 637, 723, 812, 909, 1017, 1114, 1368, 1381, 1524, 1666, 1772, 1870, 2006, 2121, 2239, 2348, 2445]
        }
    ],
    backgroundColor: "rgba(0, 0, 0, 0)",
    color: ["#ff7f50", "rgb(83, 153, 193)", "#da70d6", "#32cd32", "#6495ed", "#ff69b4", "#ba55d3", "#cd5c5c", "#ffa500", "#40e0d0", "#1e90ff", "#ff6347", "#7b68ee", "#00fa9a", "#ffd700", "#6699FF", "#ff6666", "#3cb371", "#b8860b", "#30e0e0"],
    animationEasing: "SinusoidalIn",
    grid: {
        borderWidth: 0
    }
}
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<a id="more"></a>



</br>
</br>
</br>
</br>
<div id="echarts3123" style="width: 100%;height: 500px;margin: 0 auto"></div>
<script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts3123'));
        // 指定图表的配置项和数据
        var option = {
    title: {
        text: "广东疫情分布图",
        subtext: "数据截止至2020-02-21",
        x: "center"
    },
    tooltip: {
        trigger: "item",
        formatter: "{a} <br/>{b} : {c} ({d}%)"
    },
    legend: {
        x: "right",
        data: ["东莞", "中山", "佛山", "广州", "惠州", "揭阳", "梅州", "汕头", "汕尾", "江门", "河源", "深圳", "清远", "湛江", "潮州", "珠海", "肇庆", "茂名", "阳江", "韶关"],
        y: "bottom",
        orient: "vertical",
        itemWidth: 12,
        itemHeight: 13,
        itemGap: 12
    },
    toolbox: {
        show: false,
        feature: {
            mark: {
                show: true
            },
            dataView: {
                show: true,
                readOnly: true
            },
            restore: {
                show: true
            },
            saveAsImage: {
                show: true
            }
        }
    },
    calculable: true,
    series: [
        {
            name: "感染人数",
            type: "pie",
            radius: ["6%", "70%"],
            center: ["50%", "50%"],
            roseType: "radius",
            data: [
                {
                    value: 93,
                    name: "东莞"
                },
                {
                    value: 66,
                    name: "中山"
                },
                {
                    value: 84,
                    name: "佛山"
                },
                {
                    value: 339,
                    name: "广州"
                },
                {
                    value: 62,
                    name: "惠州"
                },
                {
                    value: 8,
                    name: "揭阳"
                },
                {
                    value: 16,
                    name: "梅州"
                },
                {
                    value: 25,
                    name: "汕头"
                },
                {
                    value: 5,
                    name: "汕尾"
                },
                {
                    value: 23,
                    name: "江门"
                },
                {
                    value: 4,
                    name: "河源"
                },
                {
                    value: 416,
                    name: "深圳"
                },
                {
                    value: 12,
                    name: "清远"
                },
                {
                    value: 22,
                    name: "湛江"
                },
                {
                    value: 5,
                    name: "潮州"
                },
                {
                    value: 98,
                    name: "珠海"
                },
                {
                    value: 18,
                    name: "肇庆"
                },
                {
                    value: 14,
                    name: "茂名"
                },
                {
                    value: 13,
                    name: "阳江"
                },
                {
                    value: 10,
                    name: "韶关"
                }
            ]
        }
    ]
}
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx是一款轻量级高性能的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</p>
<a id="more"></a>

<h2 id="1-Linux安装Nginx"><a href="#1-Linux安装Nginx" class="headerlink" title="1.Linux安装Nginx"></a>1.Linux安装Nginx</h2><p>Linux环境下安装Nginx</p>
<p>Linux版本：CentOS7 64位</p>
<p>一：首先需要Nginx的安装包，这有以下两种方式：</p>
<p>1.在window下载Nginx安装压缩包，再使用工具（我用的是FinalShell）上传到Linux目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在Linux中输入以下命令</span><br><span class="line">cd &#x2F;usr&#x2F;local</span><br><span class="line">&#x2F;&#x2F; 创建一个文件夹（用于存放安装包）</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx</span><br></pre></td></tr></table></figure>

<p><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">nginx下载</a> ，下载到本地之后，使用上传工具或者xhell输入命令rz上传到Linux的/usr/ 目录下(目录不规定，可自由选择)。</p>
<p>2.在Linux上使用命令下载安装包。</p>
<p>nginx下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>使用命令解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.17.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>二：在安装之前需要先确认一下系统中是否安装：gcc，pcre-devel，openssl-devel</p>
<p>如果没有安装使用以下命令安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;一键安装上面四个依赖</span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p>三：安装nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入nginx目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">#进入目录</span><br><span class="line">cd nginx-1.13.7</span><br><span class="line"># 执行命令</span><br><span class="line">.&#x2F;configure</span><br><span class="line"># 执行make命令</span><br><span class="line">make</span><br><span class="line"># 执行make install命令</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>四：配置nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打开配置文件</span><br><span class="line">vi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>

<p>快捷键：</p>
<ul>
<li><p>按 i 即可进入输入模式</p>
</li>
<li><p>按Esc 为退出编辑</p>
</li>
<li><p>:wq  保存退出</p>
</li>
<li><p>Shift + zz  不保存退出</p>
</li>
</ul>
<p>将端口号改成8089，因为可能apeache占用80端口，apeache端口尽量不要修改，我们选择修改nginx端口。</p>
<p>server_name的localhost修改为你服务器ip地址/或者域名。</p>
<p><img src="https://pic.downk.cc/item/5ee48c47c2a9a83be5fc14a0.png" alt=""></p>
<p>五：启动nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>如果出现报错：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed</p>
<p>则运行： /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</p>
<p>再次启动即可！</p>
<p>查看nginx进程是否启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<p>访问服务器IP或域名即可查看</p>
<p>六：其他</p>
<p>安装完成一般常用命令</p>
<p>进入安装目录中，</p>
<p>命令： cd /usr/local/nginx/sbin</p>
<p>启动，关闭，重启，命令：</p>
<p>./nginx                     启动</p>
<p>./nginx -s stop        关闭</p>
<p>./nginx -s reload     重启</p>
<h2 id="2-Https-配置"><a href="#2-Https-配置" class="headerlink" title="2.Https 配置"></a>2.Https 配置</h2><p>Nginx 常用来配置Https认证，主要有两个步骤：签署第三方可信任的SSL证书 和 配置 HTTPS</p>
<p>1.签署第三方可信任的 SSL</p>
<p>配置 HTTPS 要用到私钥 example.key 文件和example.crt 证书文件，而申请证书文件的时候要用到 example.csr 文件。</p>
<p>将已获取到的 <code>example.crt</code> 证书文件和 example.key<code>私钥文件从本地目录拷贝到 Nginx 服务器的</code>/usr/local/nginx/conf` 目录（此处为 Nginx 默认安装目录，请根据实际情况操作）下。</p>
<p>详细的SSL证书介绍可去腾讯云或者阿里云或者搜索其他网站了解</p>
<p>2.Nginx配置https</p>
<p>编辑 Nginx 根目录下的 <code>conf/nginx.conf</code> 文件</p>
<p>要开启 HTTPS 服务，在配置文件信息块(server)，必须使用监听命令 listen 的 ssl 参数和定义服务器证书文件和私钥文件，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     #SSL 访问端口号为 443</span><br><span class="line">     listen 443 ssl; </span><br><span class="line">     #填写绑定证书的域名</span><br><span class="line">     server_name www.xxxx.com; </span><br><span class="line">     #证书文件名称</span><br><span class="line">     ssl_certificate 1_www.xxxx.com_bundle.crt; </span><br><span class="line">     #私钥文件名称</span><br><span class="line">     ssl_certificate_key 2_www.xxxx.com.key; </span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     #请按照以下协议配置</span><br><span class="line">     ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">     ssl_ciphers ECDHE-RSA-AES128-GCM SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">     ssl_prefer_server_ciphers on;</span><br><span class="line">     location &#x2F; &#123;</span><br><span class="line">        #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class="line">         root &#x2F;var&#x2F;www&#x2F;www.xxxx.com; </span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>3.在 Nginx 根目录下，通过执行以下命令验证配置文件问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;sbin&#x2F;nginx -t</span><br></pre></td></tr></table></figure>

<p>​    存在，请您重新配置或者根据提示修改存在问题。</p>
<p>​    若不存在，请执行重启 Nginx 。</p>
<p>4.重启 Nginx，即可使用 <code>https://www.domain.com</code> 进行访问。</p>
<h3 id="HTTP-自动跳转-HTTPS-的安全配置"><a href="#HTTP-自动跳转-HTTPS-的安全配置" class="headerlink" title="HTTP 自动跳转 HTTPS 的安全配置"></a>HTTP 自动跳转 HTTPS 的安全配置</h3><p>Nginx 支持 rewrite 功能。若您在编译时没有去掉 pcre，您可在 HTTP 的 server 中增加 <code>return 301 https://$host$request_uri;</code>，即可将默认80端口的请求重定向为 HTTPS。修改如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 443 ssl;</span><br><span class="line">#填写绑定证书的域名</span><br><span class="line">server_name www.domain.com; </span><br><span class="line">#网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class="line">root &#x2F;var&#x2F;www&#x2F;www.xxxx.com; </span><br><span class="line">index index.html index.htm;   </span><br><span class="line">#证书文件名称</span><br><span class="line">ssl_certificate  1_www.xxxx.com_bundle.crt; </span><br><span class="line">#私钥文件名称</span><br><span class="line">ssl_certificate_key 2_www.xxxx.com.key; </span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">   index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">#填写绑定证书的域名</span><br><span class="line">server_name www.xxxx.com; </span><br><span class="line">#把http的域名请求转成https</span><br><span class="line">return 301 https:&#x2F;&#x2F;$host$request_uri; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Nginx常见配置"><a href="#3-Nginx常见配置" class="headerlink" title="3.Nginx常见配置"></a>3.Nginx常见配置</h2><h3 id="3-1-IP白名单"><a href="#3-1-IP白名单" class="headerlink" title="3.1 IP白名单"></a>3.1 IP白名单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以配置nginx的白名单，规定有哪些ip可以访问你的服务器，防爬虫必备</span><br></pre></td></tr></table></figure>

<ul>
<li><p>简单配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    deny  192.168.0.1; &#x2F;&#x2F; 禁止该ip访问</span><br><span class="line">    deny  all; &#x2F;&#x2F; 禁止所有</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>白名单配置</p>
<p>1.建立白名单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;white_ip.conf</span><br><span class="line"> ...</span><br><span class="line">192.168.0.1 1;</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>2.修改nginx配置(nginx.conf)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">geo $remote_addr $ip_whitelist&#123;</span><br><span class="line">  default 0;</span><br><span class="line">  include ip.conf;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; geo 指令主要是可以根据指定变量的值映射出一个新变量。如果不指定变量，默认为&#96;$remote_addr&#96;</span><br></pre></td></tr></table></figure>

<p>3.为匹配项做白名单设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    if ( $ip_whitelist &#x3D; 0 )&#123;</span><br><span class="line">      return 403; &#x2F;&#x2F;不在白名单返回 403</span><br><span class="line">    &#125;</span><br><span class="line">    index index.html;</span><br><span class="line">    root &#x2F;tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-适配PC与移动环境"><a href="#3-2-适配PC与移动环境" class="headerlink" title="3.2 适配PC与移动环境"></a>3.2 适配PC与移动环境</h3><p>当用户从移动端打开PC端baidu.com的场景时，将自动跳转指移动端m.baidu.com，<br>本质上是Nginx可以通过内置变量$http_user_agent，获取到请求客户端的userAgent，<br>从而知道当前用户当前终端是移动端还是PC，进而重定向到H5站还是PC站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    &#x2F;&#x2F;移动、pc设备agent获取</span><br><span class="line">    if ($http_user_agent ~* &#39;(Android|webOS|iPhone)&#39;) &#123;</span><br><span class="line">      set $mobile_request &#39;1&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($mobile_request &#x3D; &#39;1&#39;) &#123;</span><br><span class="line">      rewrite ^.+ http:&#x2F;&#x2F;m.baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-配置gzip"><a href="#3-3-配置gzip" class="headerlink" title="3.3 配置gzip"></a>3.3 配置gzip</h3><p>开启Nginx gzip，压缩后,静态资源的大小会大大的减少,从而可以节约大量的带宽,提高传输效率,带来更好的响应和体验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  gzip on; &#x2F;&#x2F;启动</span><br><span class="line">  gzip_buffers 32 4K;</span><br><span class="line">  gzip_comp_level 6; &#x2F;&#x2F;压缩级别，1-10，数字越大压缩的越好</span><br><span class="line">  gzip_min_length 100; &#x2F;&#x2F;不压缩临界值，大于100的才压缩，一般不用改</span><br><span class="line">  gzip_types application&#x2F;javascript text&#x2F;css text&#x2F;xml;</span><br><span class="line">  gzip_disable &quot;MSIE [1-6]\.&quot;; &#x2F;&#x2F; IE6对Gzip不友好，对Gzip</span><br><span class="line">  gzip_vary on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-报错问题"><a href="#4-报错问题" class="headerlink" title="4.报错问题"></a>4.报错问题</h2><p>这只是目前遇到的报错问题，后期遇到新问题会更新</p>
<ul>
<li>解决Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid” failed（2:No such file or directory）</li>
</ul>
<p><img src="https://pic.downk.cc/item/5ee48f65c2a9a83be500c7dd.png" alt=""></p>
<p>问题：环境问题</p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用nginx -c的参数指定nginx.conf文件的位置</span><br><span class="line">　　[root@localhost nginx]# cd logs&#x2F;</span><br><span class="line">　　[root@localhost logs]# ll</span><br><span class="line">　　总用量 12</span><br><span class="line">　　-rw-r--r-- 1 root root 1246 3月 9 18:10 access.log</span><br><span class="line">　　-rw-r--r-- 1 root root 516 3月 10 15:39 error.log</span><br><span class="line">　　-rw-r--r-- 1 root root 5 3月 10 15:38 nginx.pid</span><br><span class="line"></span><br><span class="line"># 看nginx.pid文件已经有了。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解决nginx: [emerg] the “ssl”parameter requires ngx_http_ssl_module in/usr/local/nginx/conf/nginx.conf:37</p>
<p>问题：缺少http_ssl_module模块</p>
<p>解决方法：开启SSL模块</p>
<p>1.找到Nginx安装包位置，如果忘记位置或者误删，可通过命令查看版本，重新下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看版本</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V （&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;是你Nginx服务器的实际位置）</span><br></pre></td></tr></table></figure>

<p>2.生成新的Nginx配置。执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V</span><br></pre></td></tr></table></figure>

<p>查看configure arguments:后边有没有值，如果有，就复制下来。</p>
<p>然后执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --原来有的模块（如果有的话） --with-http_ssl_module</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编译</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>3.关闭现在运行的Nginx服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</span><br></pre></td></tr></table></figure>

<p>如果出现以下错误：</p>
<p>nginx: [emerg] the “ssl” parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:121</p>
<p>即为配置文件报错，无法正常关闭</p>
<p>需要将Nginx安装包中conf文件夹下的新的正确的nginx.conf替换/usr/local/nginx/conf中出问题的nginx.conf</p>
<p>再次执行关闭，成功。</p>
<p>4.把编译好的nginx覆盖掉原有的nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp .&#x2F;objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure>

<p>系统会提示是否覆盖，输入y</p>
<p>这里运行时会出现两个问题：1.报错，执行失败     2.直接成功</p>
<p>遇到系统提示<strong>Text file busy</strong>，执行失败时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 找到所有Nginx的进程</span><br><span class="line">ps -A</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1234代表Nginx进程号（不固定需查看）</span><br><span class="line">Kill 1234</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 再次执行</span><br><span class="line">cp .&#x2F;objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有报错。把正确的nginx.conf文件夹上传</span><br><span class="line"># 启动nginx</span><br><span class="line">.&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>

<p>成功结束！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>mpvue</title>
    <url>/2019/mpvue/</url>
    <content><![CDATA[<h1 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a><a href="http://mpvue.com/" target="_blank" rel="noopener">mpvue</a></h1><p> 一个使用 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 开发小程序的前端框架。框架基于 <code>Vue.js</code> 核心，<code>mpvue</code> 修改了 <code>Vue.js</code> 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 <code>Vue.js</code> 开发体验。 </p>
<a id="more"></a>
<h2 id="1-用Vue写小程序：机理"><a href="#1-用Vue写小程序：机理" class="headerlink" title="1.用Vue写小程序：机理"></a>1.用Vue写小程序：机理</h2><h5 id="webpack和相关的loader将vue的程序变为wxml、wxss、js、json。"><a href="#webpack和相关的loader将vue的程序变为wxml、wxss、js、json。" class="headerlink" title="webpack和相关的loader将vue的程序变为wxml、wxss、js、json。"></a>webpack和相关的loader将vue的程序变为wxml、wxss、js、json。</h5><p> 比如，写的： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;Hello&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>编译后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;Hello&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>

<p>再比如，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div @click&#x3D;&quot;add(5)&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>编译后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view data-n&#x3D;&quot;5&quot; bindtap&#x3D;&quot;add&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="2-快速上手-搭建"><a href="#2-快速上手-搭建" class="headerlink" title="2.快速上手(搭建)"></a>2.快速上手(搭建)</h2><p>环境： <a href="https://nodejs.org/" target="_blank" rel="noopener">nodejs</a>       <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">vue-cli</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建一个基于 mpvue-quickstart 模板的新项目</span><br><span class="line">$ vue init mpvue/mpvue-quickstart my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是配置项 # 新手一路回车选择默认就可以了</span></span><br><span class="line">? Project name my-project</span><br><span class="line">? wxmp appid touristappid	<span class="comment"># 默认游客id</span></span><br><span class="line">? Project description A Mpvue project</span><br><span class="line">? Author </span><br><span class="line">? Vue build runtime</span><br><span class="line">? Use Vuex? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated <span class="string">"my-project"</span>.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line"></span><br><span class="line">     <span class="built_in">cd</span> my-project</span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br><span class="line"></span><br><span class="line">   Documentation can be found at http://mpvue.com</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装依赖</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>

<p> 运行成功的回显之后，可以看到本地多了个 <code>dist</code> 目录，这个目录里就是生成的小程序相关代码。 </p>
<h2 id="3-快速上手-开发"><a href="#3-快速上手-开发" class="headerlink" title="3.快速上手(开发)"></a>3.快速上手(开发)</h2><p>选择 <code>小程序项目</code> 并依次填好需要的信息：</p>
<ul>
<li>项目目录：就是刚刚创建的项目目录（非 dist 目录）</li>
<li>AppID：没有的话可以点选体验“小程序”，只影响是否可以真机调试。</li>
<li>项目名称。</li>
</ul>
<p>如图：</p>
<img src="https://pic.downk.cc/item/5e76f2659d7d586a54920c69.png" style="zoom:50%;" />

<p> 接下来就可以用编辑器（或者IDE）打开 <code>my-project</code> 中的 <code>src</code> 目录下的代码编写试试 </p>
<h2 id="4-特殊限制"><a href="#4-特殊限制" class="headerlink" title="4.特殊限制"></a>4.特殊限制</h2><h4 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a><strong>内置组件</strong></h4><p>slider、map、camera √</p>
<p>vuex √</p>
<p>组件 √</p>
<p>vue生命周期 ×</p>
<p>小程序生命周期 √</p>
<p>v-if、v-for √</p>
<p>以上这些好用的功能，在mpvue中，记得都是通通不能用的哦！！！</p>
<p>在模板中，用于数据绑定的双括号语法中的表达式功能存在诸多限制。</p>
<p>我们只能在双括号中使用一些简单的运算符运算（+ - * % ?: ! == === &gt; &lt; [] .）。</p>
<p>​    但是也得找些可用的替代方案呐，大伙先考虑使用计算属性(computed)来做吧。</p>
<p>在模板中，动态插入HTML的<code>v-html</code>指令不可用</p>
<p>​    这条很好理解，小程序的界面并不是基于浏览器的BOM/DOM的，所以不能动态的在界面模板里直接插入HTML    片段来显示。</p>
<p>​    题外话，如果有在小程序里插入html片段的需求怎么办？可以用``组件或者`<a href="https://github.com/icindy/wxParse" target="_blank" rel="noopener">wxParse</a>来实现。</p>
<h4 id="methods下的函数"><a href="#methods下的函数" class="headerlink" title="methods下的函数"></a><strong>methods下的函数</strong></h4><p> 在模板中，除事件监听外，其余地方都不能调用methods下的函数 </p>
<p>在Vue中，模板里调用methods部分定义的函数是非常常见的，比如下面这段代码所示，</p>
<p><em>在v-if指令中调用函数getErrorNum()：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;getErrorNum() &gt; 0  &amp;&amp; code &#x3D;&#x3D; 10001&quot; class&#x3D;&quot;error&quot;&gt;&#123;&#123; errorMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>可是，在mpvue里就是不可以用！因为在小程序原生模板wxml里就不支持这种函数调用，导致mpvue没有很好的方式转译过去（虽然小程序有wxs，但是感觉翻译过去mpvue要做的工作会比较复杂）。</p>
<p>所以，可用的替代方案可能还是计算属性了。</p>
<h4 id="style或class属性"><a href="#style或class属性" class="headerlink" title="style或class属性"></a>style或class属性</h4><p> 在模板中，不支持直接绑定一个对象到<code>style</code>或<code>class</code>属性上 </p>
<p> 在Vue中我们可以为HTML元素的<code>class</code>或<code>style</code>绑定一个对象，并按照对象内的属性值来决定是否添加对应的属性名到HTML元素的样式名。示例如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class&#x3D;&quot;classObject&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      classObject: &#123;</span><br><span class="line">        active: true,</span><br><span class="line">        &#39;text-danger&#39;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p> 上面这段代码的运行后生成的HTML将是： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;active&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p> 但是在mpvue下面这个特性也不能用，按官方说法是由于涉及到一些性能相关的原因。那如果要动态改变组件的<code>class</code>该怎么写呢？官方给出的方式是这样的： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;&#123; active: classObject.active, &#39;text-danger&#39;: classObject[&#39;text-danger&#39;]&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>其实改动不大，稍微多打了一些字而已，相当于在模板的<code>class</code>里再定义一个对象罢了。但是据文档中说这样会提升性能。好吧，为了性能，这点麻烦还是能忍受的。但是它又说了：从性能考虑，建议不要过度依赖此……看来即使这样，也还是有性能问题。</p>
<p>看来最好一点的方案，还是得使用计算属性，直接生成一串样式的字符串，绑定到<code>class</code>或<code>style</code>上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class&#x3D;&quot;classStr&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      classObject: &#123;</span><br><span class="line">        active: true,</span><br><span class="line">        &#39;text-danger&#39;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    classStr() &#123;</span><br><span class="line">      let arr &#x3D; []</span><br><span class="line">      for (let p in this.classObject) &#123;</span><br><span class="line">        if (this.classObject[p]) &#123;</span><br><span class="line">          arr.push(p)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return arr.join(&#39; &#39;) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p> 在模板中，嵌套使用<code>v-for</code>时，必须指定索引<code>index</code> </p>
<p> 通常，我们在Vue模板中嵌套循环渲染数组的时候，一般是这个样子的： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul v-for&#x3D;&quot;category in categories&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;product in category.products&quot;&gt;&#123;&#123;product.name&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p> 但在mpvue中使用这种嵌套结构的<code>v-for</code>时，则必须每层的<code>v-for</code>上都给出索引，且索引需取不同名字： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul v-for&#x3D;&quot;(category, index) in categories&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(product, productIndex) in category.products&quot;&gt;&#123;&#123;product.name&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>在mpvue中，一般可以使用Web的DOM事件名来绑定事件，mpvue会将Web事件名映射成对应的小程序事件名，对应列表如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 左侧为WEB事件 : 右侧为对应的小程序事件</span><br><span class="line">&#123;</span><br><span class="line">    click: &#39;tap&#39;,</span><br><span class="line">    touchstart: &#39;touchstart&#39;,</span><br><span class="line">    touchmove: &#39;touchmove&#39;,</span><br><span class="line">    touchcancel: &#39;touchcancel&#39;,</span><br><span class="line">    touchend: &#39;touchend&#39;,</span><br><span class="line">    tap: &#39;tap&#39;,</span><br><span class="line">    longtap: &#39;longtap&#39;,</span><br><span class="line">    input: &#39;input&#39;,</span><br><span class="line">    change: &#39;change&#39;,</span><br><span class="line">    submit: &#39;submit&#39;,</span><br><span class="line">    blur: &#39;blur&#39;,</span><br><span class="line">    focus: &#39;focus&#39;,</span><br><span class="line">    reset: &#39;reset&#39;,</span><br><span class="line">    confirm: &#39;confirm&#39;,</span><br><span class="line">    columnchange: &#39;columnchange&#39;,</span><br><span class="line">    linechange: &#39;linechange&#39;,</span><br><span class="line">    error: &#39;error&#39;,</span><br><span class="line">    scrolltoupper: &#39;scrolltoupper&#39;,</span><br><span class="line">    scrolltolower: &#39;scrolltolower&#39;,</span><br><span class="line">    scroll: &#39;scroll&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了上面的之外，Web表单组件<code>和</code>的change事件会被转为blur事件。</p>
<p>然后，像<code>keydown</code>、<code>keypress</code>之类的键盘事件也没有了，因为小程序没有键盘，所以不需要这些事件。</p>
<p>还有，Vue里面绑定事件的时候，可以指定事件修饰符，但是在mpvue里，官方给出了一些注意信息：</p>
<blockquote>
<ul>
<li>.stop 的使用会阻止冒泡，但是同时绑定了一个非冒泡事件，会导致该元素上的 catchEventName 失效！【这个亲测了一下，感觉是最新版本里修复了还是怎么的，没有文档里说的这个问题了】</li>
<li>.prevent 可以直接干掉，因为小程序里没有什么默认事件，比如submit并不会跳转页面【也就是不需要支持】</li>
<li>.capture 支持 1.0.9 【也就是在 mpvue 1.0.9及以后版本支持】</li>
<li>.self 没有可以判断的标识 【也就是不支持】</li>
<li>.once 也不能做，因为小程序没有 removeEventListener, 虽然可以直接在 handleProxy 中处理，但非常的不优雅，违背了原意，暂不考虑【也就是不支持】</li>
</ul>
</blockquote>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p>对于表单，请直接使用小程序原生的表单组件</p>
<p>表单组件又多又复杂，框架可能Hold不住。所以在实际开发中，推荐直接使用小程序的表单组件标签来写，而不是使用Web的表单组件标签来写。当然了，在mpvue中使用了小程序的组件标签，数据绑定功能还是完全可以用的。给个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;picker @change&#x3D;&quot;handlePickerChange&quot; :value&#x3D;&quot;selectedIndex&quot; :range&#x3D;&quot;messages&quot;&gt;</span><br><span class="line">      &lt;view class&#x3D;&quot;picker&quot;&gt;当前消息：&#123;&#123; messages[selectedIndex] &#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;picker&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      selectedIndex: 0,</span><br><span class="line">      messages: [&#39;Hello&#39;, &#39;World&#39;, &#39;Haha&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handlePickerChange (e) &#123;</span><br><span class="line">      console.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="路由功能"><a href="#路由功能" class="headerlink" title="路由功能"></a>路由功能</h4><p> 在Vue开发Web应用的时候，通常使用<code>vue-router</code>来进行页面路由。但是在mpvue小程序开发中，不能用这种方式，请使用``标签和小程序原生API <code>wx.navigateTo</code>等来做路由功能。 </p>
<h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p> 请求后端数据，我们通常在Web开发中使用<code>axios</code>等ajax库来实现，但是在小程序开发中也是不能用的，也请使用小程序的原生API <code>wx.request</code>等来进行。 </p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>学习</tag>
        <tag>mpvue</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序</title>
    <url>/2019/miniapp/</url>
    <content><![CDATA[<p>小程序知识的一些总结</p>
<a id="more"></a>

<h2 id="浏览器，服务器，小程序之间模块组成"><a href="#浏览器，服务器，小程序之间模块组成" class="headerlink" title="浏览器，服务器，小程序之间模块组成"></a>浏览器，服务器，小程序之间模块组成</h2><h3 id="1-浏览器"><a href="#1-浏览器" class="headerlink" title="1. 浏览器"></a>1. 浏览器</h3><p>​      <strong>核心（ESMAScript）</strong>：规定了JS的语法、类型、语句、关键字、保留字、操作符、对象 </p>
<pre><code>**文档对象模型（DOM）**：是用于HTML的应用接口（API），将整个页面映射为一个多层节点结构。 

**浏览器对象模型（BOM）**：与DOM不同，无标准，只是JS一部分，用来对浏览器进行访问和操作。 </code></pre><h3 id="2-服务器"><a href="#2-服务器" class="headerlink" title="2. 服务器"></a>2. 服务器</h3><p><strong>ES</strong>，<strong>native</strong>, <strong>npm</strong></p>
<h3 id="3-小程序"><a href="#3-小程序" class="headerlink" title="3. 小程序"></a>3. 小程序</h3><p><strong>ES</strong>， <strong>小程序框架</strong>， <strong>专用API</strong></p>
<h2 id="小程序运行环境"><a href="#小程序运行环境" class="headerlink" title="小程序运行环境"></a>小程序运行环境</h2><h3 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h3><p>IDE——<a href="https://nwjs.org.cn/" target="_blank" rel="noopener">nwjs</a></p>
<h3 id="2-生产环境"><a href="#2-生产环境" class="headerlink" title="2. 生产环境"></a>2. 生产环境</h3><p> android——X5内核<br> ios——JSC内核<br> PS：平台不同，环境不同，兼容性也会有差异。因此，尽量多做真机测试。 </p>
<h2 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h2><img src="https://pic.downk.cc/item/5ea4541bc2a9a83be510a0d3.png" style="zoom: 33%;" />

<h3 id="（1）结构"><a href="#（1）结构" class="headerlink" title="（1）结构"></a><strong>（1）结构</strong></h3><p>​    <strong>WXML</strong>：描述页面的内容</p>
<img src="https://pic.downk.cc/item/5ea45606c2a9a83be512db93.png" style="zoom: 50%;" />

<p><strong>WXML文件导入</strong></p>
<p> <strong>（1）</strong>import<br>        只导入目标文件中的模板，而间接的模板不会导入<br><strong>（2）</strong>include<br>        导入目标文件中，除了模板的全部内容，间接的模板也会导入 </p>
<p><strong>WXML特性：</strong></p>
<ol>
<li><p>数据绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)文本内容绑定</span><br><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:<span class="string">'Hello, world'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)属性绑定</span><br><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text data-name=<span class="string">"&#123;&#123;theName&#125;&#125;"</span>&gt;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--运算符绑定--&gt;</span></span><br><span class="line"><span class="regexp">	&lt;text hidden="&#123;&#123;falg ? true : false&#125;&#125;"&gt;Hi&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><br><span class="line"><span class="regexp">Page(&#123;</span></span><br><span class="line"><span class="regexp">    data:&#123;</span></span><br><span class="line"><span class="regexp">        theName:"Jack"</span></span><br><span class="line"><span class="regexp">        flag:false</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.downk.cc/item/5ea6fad9c2a9a83be5dfb7aa.png" alt=""></p>
</li>
<li><p>列表渲染</p>
<h5 id="列表渲染时，没有设置key的话，会有警告。若是静态列表，无需强求，但强迫症例外。"><a href="#列表渲染时，没有设置key的话，会有警告。若是静态列表，无需强求，但强迫症例外。" class="headerlink" title="列表渲染时，没有设置key的话，会有警告。若是静态列表，无需强求，但强迫症例外。"></a>列表渲染时，没有设置key的话，会有警告。若是静态列表，无需强求，但强迫症例外。</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">	&lt;block wx:for&#x3D;&quot;&#123;&#123;items&#125;&#125;&quot; wx:for-item&#x3D;&quot;item&quot; wx:key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">		&lt;view&gt;&#123;&#123;index&#125;&#125;:&#123;&#123;item.name&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">	&lt;&#x2F;block&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">	data: &#123;</span><br><span class="line">		items: [</span><br><span class="line">			&#123; name: &#39;商品A&#39;&#125;，</span><br><span class="line">			&#123; name: &#39;商品B&#39;&#125;，</span><br><span class="line">			&#123; name: &#39;商品C&#39;&#125;，</span><br><span class="line">			&#123; name: &#39;商品D&#39;&#125;，</span><br><span class="line">			&#123; name: &#39;商品E&#39;&#125;，</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">（1）单个渲染</span><br><span class="line">直接在标签内部写</span><br><span class="line">（2）多个</span><br><span class="line">用block包裹，在block写</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;view&gt;今天吃什么？&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view wx:if&#x3D;&quot;&#123;&#123;condition &#x3D;&#x3D;&#x3D; 1&#125;&#125;&quot;&gt;饺子&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view wx:if&#x3D;&quot;&#123;&#123;condition &#x3D;&#x3D;&#x3D; 2&#125;&#125;&quot;&gt;米饭&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view wx:else&gt;面食&lt;&#x2F;view&gt;</span><br><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">	data: &#123;</span><br><span class="line">		condition: Math.floor(Math.random()*3+1)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">（1）单个渲染</span><br><span class="line">直接在标签内部写</span><br><span class="line">（2）多个</span><br><span class="line">用block包裹，在block写</span><br></pre></td></tr></table></figure>
</li>
<li><p>模板引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;template name&#x3D;&quot;tempItem&quot;&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;view&gt;收件人：&#123;&#123;name&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;view&gt;手机：&#123;&#123;phone&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;view&gt;地址：&#123;&#123;address&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">	&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template is&#x3D;&quot;tempItem&quot; data&#x3D;&quot;&#123;&#123;...item&#125;&#125;&quot;&gt;&lt;&#x2F;template&gt;</span><br><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">	data:&#123;</span><br><span class="line">		item:&#123;</span><br><span class="line">			name:&quot;张三&quot;，</span><br><span class="line">			phone：“18866666666”，</span><br><span class="line">			address:&quot;中国&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;文件引用</span><br><span class="line">(1)import</span><br><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;import src&#x3D;&quot;a.wxml&quot;&gt;&lt;&#x2F;import&gt;</span><br><span class="line">&lt;template is&#x3D;&quot;a&quot;&gt;&lt;&#x2F;template&gt;</span><br><span class="line">&lt;!--a.wxml--&gt;</span><br><span class="line">&lt;view&gt;Hello,world&lt;&#x2F;view&gt;</span><br><span class="line">&lt;template name&#x3D;&quot;a&quot;&gt;Hello,world&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">(2)include</span><br><span class="line"> &lt;!--index.wxml--&gt;</span><br><span class="line"> &lt;include src&#x3D;&quot;a.wxml&quot; &#x2F;&gt;</span><br><span class="line"> &lt;template is&#x3D;&quot;a&quot;&gt;&lt;&#x2F;template&gt;</span><br><span class="line"> &lt;!--a.wxml--&gt;</span><br><span class="line"> &lt;template name&#x3D;&quot;a&quot;&gt;</span><br><span class="line"> 	&lt;view&gt;</span><br><span class="line"> 		This is a.wxml</span><br><span class="line"> 	&lt;&#x2F;view&gt;</span><br><span class="line"> &lt;&#x2F;template&gt;</span><br><span class="line"> &lt;view&gt;Hello,world&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="（2）样式"><a href="#（2）样式" class="headerlink" title="（2）样式"></a><strong>（2）样式</strong></h3><p>​    <strong>WXSS</strong>：描述页面的样式</p>
<p>​    WXSS支持响应式像素：rpx</p>
<p>​    外联样式导入：@import</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;container&quot;&gt;Hello&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;** index.wxss **&#x2F;</span><br><span class="line">@import &#39;.&#x2F;assets.wxss&#39;;</span><br><span class="line">.container &#123;</span><br><span class="line">	color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;** assets.wxss **&#x2F;</span><br><span class="line"> .container &#123;</span><br><span class="line"> 	border: 1px solid #000;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​    内联样式导入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;view style&#x3D;&quot;width:500rpx; height:30px; background-color:&#123;&#123;colorValue&#125;&#125;;&quot;&gt;Hello&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">	data:&#123;</span><br><span class="line">		colorValue: &#39;red&#39;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<img src="https://pic.downk.cc/item/5ea7076cc2a9a83be5ed0855.png" style="zoom: 80%;" />

<img src="https://pic.downk.cc/item/5ea70846c2a9a83be5edf84a.png" style="zoom:50%;" />

<h3 id="（3）数据逻辑"><a href="#（3）数据逻辑" class="headerlink" title="（3）数据逻辑"></a><strong>（3）数据逻辑</strong></h3><p>​    <strong>WXS</strong>：对WXML能力增强的一种脚本语言</p>
<p>​    wxs其实就是对JS上成做了一些封装和限制</p>
<p>​    注：在wxs代码块中，/*为结束注释，后面的代码不会执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; （1）可通过标签声明</span><br><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;wxs module&#x3D;&quot;m1&quot;&gt;</span><br><span class="line">	module.exports &#x3D; &#123;</span><br><span class="line">		message: &#39;Hello,world!&#39;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;wxs&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt; &#123;&#123;m1.message&#125;&#125; &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;（2）通过文件声明</span><br><span class="line">&#x2F;&#x2F; 在标签内加入module&#x3D;&quot;xxx&quot;，xxx为组件对象，而代码块暴露出来的变量，将作为该对象的属性或方法。</span><br><span class="line">&#x2F;&#x2F; 除了module.exports外，不要用其他ES6语法</span><br><span class="line"></span><br><span class="line">&lt;!--index.wxml--&gt;</span><br><span class="line">&lt;wxs src&#x3D;&quot;.&#x2F;m2.wxs&quot; module&#x3D;&quot;m2&quot;&gt;&lt;&#x2F;wxs&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;m2.message&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&#x2F;&#x2F; m2.wxs</span><br><span class="line">module.exports &#x3D; require(&#39;.&#x2F;m1.wxs&#39;)</span><br><span class="line">&#x2F;&#x2F; m1.wxs </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">	message: &quot;hello world!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://pic.downk.cc/item/5ea7f7c7c2a9a83be5d34ded.png" style="zoom: 50%;" />

<img src="https://pic.downk.cc/item/5ea7f87fc2a9a83be5d4204e.png" style="zoom: 67%;" />

<img src="https://pic.downk.cc/item/5ea7f95dc2a9a83be5d54634.png" style="zoom:67%;" />

<p>​    <strong>JS</strong> ：处理页面的交互逻辑以及数据通信</p>
<p><strong>存储数据</strong>：</p>
<p>视图层：dataset, 自定义属性</p>
<p>逻辑层：data对象</p>
<h3 id="（4）其他构成"><a href="#（4）其他构成" class="headerlink" title="（4）其他构成"></a>（4）其他构成</h3><p> <strong>project.config.json</strong> ： 保存环境配置，防止换电脑跑不了项目。 </p>
<p> <strong>其他json</strong> ： 保存页面配置，而app.json负责整个小程序的配置（操盘手）。 </p>
<p> <strong>utils文件夹</strong> ： 存放共用工具类，如常用的函数。 </p>
<h2 id="小程序框架——MINA框架"><a href="#小程序框架——MINA框架" class="headerlink" title="小程序框架——MINA框架"></a>小程序框架——MINA框架</h2><p><img src="https://pic.downk.cc/item/5ea7fc96c2a9a83be5d92724.jpg" alt=""></p>
<p> <strong>特点</strong><br>（1）双线程<br>（2）WXML、WXSS、WXS都在ui线程中运行<br>（3）逻辑层通过page.setData(obj)方法，向视图层传递需要更新的数据 </p>
<h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><h3 id="冷启动"><a href="#冷启动" class="headerlink" title="冷启动"></a><strong>冷启动</strong></h3><p> 第一次启动、5分钟后再启动、两次警告后再启动（被微信销毁了） </p>
<h3 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a><strong>热启动</strong></h3><p> 5分钟内启动 </p>
<p>若启动时，小程序有新版本，会异步加载内容，默认下次启动时替换为新版本，但是可以使用某api功能，达到立即替换为新版本。 </p>
<h2 id="资源加载流程"><a href="#资源加载流程" class="headerlink" title="资源加载流程"></a>资源加载流程</h2><p><img src="https://pic.downk.cc/item/5ea7fdb8c2a9a83be5da580f.jpg" alt=""></p>
<p> <strong>特点</strong><br>（1）本地缓存<br>（2）CDN内容分发网络<br>（3）ajax </p>
<h2 id="生命周期事件——程序应用生命周期、页面生命周期"><a href="#生命周期事件——程序应用生命周期、页面生命周期" class="headerlink" title="生命周期事件——程序应用生命周期、页面生命周期"></a>生命周期事件——程序应用生命周期、页面生命周期</h2><p><strong>程序应用生命周期</strong><br> （1）onLaunch：初始化完成<br> （2）onHide：收起小程序到后台<br> （3）onShow：展开小程序到前台（热启动）<br> （4）onError：程序出错</p>
<blockquote>
<p>globalData——全局数据</p>
</blockquote>
<p><strong>页面生命周期</strong><br> （1）onLoad：页面冷启动后，初次加载（只有一次）<br> （2）onShow：每次切换页面，在之后的页面中触发<br> （3）onReady：页面被首次切换到（每个页面只有一次）<br> （4）onHide：每次切换页面，在之前的页面中触发<br> （5）onUnload：关闭当前页</p>
<blockquote>
<p>data——页面数据</p>
</blockquote>
<p><img src="https://pic.downk.cc/item/5ea7fecfc2a9a83be5dba093.jpg" alt=""></p>
<h2 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h2><p><strong>概念</strong><br> 以栈的形式，管理页面的历史记录。</p>
<p><strong>路由方式</strong></p>
<ol>
<li>初始化：新页面入栈</li>
<li>打开新页面： 新页面入栈</li>
<li>页面重定向： 当前页面出栈，新页面入栈</li>
<li>页面返回：页面不断出栈，直到目标返回页，新页面入栈</li>
<li>Tab切换：页面全部出栈，只留下新的Tab页面</li>
<li>重加载：页面全部出栈，只留下新的页面</li>
</ol>
<img src="https://pic.downk.cc/item/5ea80794c2a9a83be5e5ec01.png" style="zoom: 67%;" />

<p><strong>注意点</strong><br> （1）重定向：前一个页面出栈。<br> （2）tab切换、重新加载：之前所有页面出栈。<br> （3）进栈onLoad，出栈onUnload。<br> （4）栈存放页面数量，不能超过5个。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>事件是视图层到逻辑层的通讯方式</li>
<li>事件可以将用户的行为反馈到逻辑层处理</li>
<li>事件可以绑定在组件上，触发事件后，就会执行逻辑层中对应的事件处理函数</li>
<li>事件对象可以携带额外信息</li>
</ul>
<p><img src="https://pic.downk.cc/item/5ea921e8c2a9a83be50349b4.png" alt=""></p>
<p>详细可参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">官方文档</a></p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ol>
<li><p>冒泡流（子到父）</p>
<p>bind(xxx)——冒泡</p>
<p>catch(xxx)——不冒泡</p>
</li>
<li><p>捕获流（父到子）</p>
<p>capture-bind:xxx——捕获，再冒泡</p>
<p>capture-catch:xxx——捕获到位后，停在该位置，不冒泡</p>
</li>
</ol>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>组件是视图层的基本组成单元</li>
<li>组件自带一些功能与微信风格的样式</li>
<li>一个组件通常包括：开始标签和结束标签</li>
<li>属性用来修饰这个组件，内容在两个标签之内</li>
</ul>
<img src="https://pic.downk.cc/item/5ea92c4fc2a9a83be50dfdca.png" style="zoom: 67%;" />

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="（1）this问题"><a href="#（1）this问题" class="headerlink" title="（1）this问题"></a>（1）this问题</h3><p>注意回调时，this指向会产生变化。</p>
<p> <strong>解决措施</strong><br>（1）私有变量保存this。<br>（2）ES6语法。 </p>
<h3 id="（2）模板管理"><a href="#（2）模板管理" class="headerlink" title="（2）模板管理"></a>（2）模板管理</h3><p> 在pages文件夹下，新开一个template文件夹，存放不同类型的模板，便于管理。 </p>
<h3 id="（3）页面带参跳转"><a href="#（3）页面带参跳转" class="headerlink" title="（3）页面带参跳转"></a>（3）页面带参跳转</h3><pre><code>**（1）旧页面**
   在url中，拼接字符串。
**（2）新页面**
   onLoad()会接收一个装载参数的对象。 </code></pre><h3 id="（4）性能优化"><a href="#（4）性能优化" class="headerlink" title="（4）性能优化"></a>（4）性能优化</h3><p>​        <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html" target="_blank" rel="noopener">参考文档</a></p>
<h3 id="（5）自动预览"><a href="#（5）自动预览" class="headerlink" title="（5）自动预览"></a>（5）自动预览</h3><p>​     开发者工具中，具备自动预览功能，让手机与电脑实时通讯，不必每次调试都要扫码，不过一定要先保存，再     进行编译预览。 </p>
<h3 id="（6）真机调试"><a href="#（6）真机调试" class="headerlink" title="（6）真机调试"></a>（6）真机调试</h3><pre><code>（1）与预览相比，真机调试提供详细的监控信息。
（2）某些设备不支持部分API，因此真机调试更可靠。 </code></pre><h2 id="开发问题"><a href="#开发问题" class="headerlink" title="开发问题"></a>开发问题</h2><h5 id="1、wx-getSystemInfo-要从onReady-阶段开始，才能正常运行。"><a href="#1、wx-getSystemInfo-要从onReady-阶段开始，才能正常运行。" class="headerlink" title="1、wx.getSystemInfo()要从onReady()阶段开始，才能正常运行。"></a>1、wx.getSystemInfo()要从onReady()阶段开始，才能正常运行。</h5><h5 id="2、canvas系列"><a href="#2、canvas系列" class="headerlink" title="2、canvas系列"></a>2、canvas系列</h5><p>（1）ctx.drawImage()图片路径必须是本地的，因此先要用wx.downloadFile()将图片下载到本地，再进行绘制。<br> （2）wx.canvasToTempFilePath()必须作为ctx.draw()的回调，才能正常导出画布截图路径；而且为了防止产出图片变形（还没完全生成），应该为该方法加上大于300ms的延迟。因此，基本格式为ctx.draw()——&gt;wx.canvasToTempFilePath()——&gt;setTimeout()。<br> （3）画布尺寸单位为px，想要响应式，必须先获取屏幕像素，通过rpx转换公式运算，获得单个rpx相应的值，此时插入因数就相当于使用rpx单位。<br> （4）隐藏画布的最佳方法：用绝对定位甩出屏幕。</p>
<blockquote>
<p>1、外层零宽高overflow: hidden藏不住画布中的图片<br> 2、手法必须是藏，不能是消，若不让画布渲染，则无法对画布截图</p>
</blockquote>
<h5 id="3、广告"><a href="#3、广告" class="headerlink" title="3、广告"></a>3、广告</h5><p><strong>（1）注意官方规定的广告安放位置规则</strong><br> <strong>（2）广告元素不能绑定事件等骚操作</strong><br> <strong>（3）上线后，广告需要审核，可能一段时间显示不了广告</strong></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h5 id="1、获取当前页url"><a href="#1、获取当前页url" class="headerlink" title="1、获取当前页url"></a>1、获取当前页url</h5><p> 使用getCurrentPages可以获取当前加载中所有的页面对象的一个数组，数组最后一个就是当前页面。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var pages &#x3D; getCurrentPages() &#x2F;&#x2F;获取加载的页面</span><br><span class="line"> </span><br><span class="line">var currentPage &#x3D; pages[pages.length-1] &#x2F;&#x2F;获取当前页面的对象</span><br><span class="line"> </span><br><span class="line">var url &#x3D; currentPage.route &#x2F;&#x2F;当前页面url</span><br><span class="line"> </span><br><span class="line">var options &#x3D; currentPage.options &#x2F;&#x2F;如果要获取url中所带的参数可以查看options</span><br><span class="line">可以写成工具函数放到utils中：</span><br><span class="line"></span><br><span class="line">&#x2F;*获取当前页url*&#x2F;</span><br><span class="line">function getCurrentPageUrl()&#123;</span><br><span class="line">var pages &#x3D; getCurrentPages() &#x2F;&#x2F;获取加载的页面</span><br><span class="line">var currentPage &#x3D; pages[pages.length-1] &#x2F;&#x2F;获取当前页面的对象</span><br><span class="line">var url &#x3D; currentPage.route &#x2F;&#x2F;当前页面url</span><br><span class="line">return url</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;*获取当前页带参数的url*&#x2F;</span><br><span class="line">function getCurrentPageUrlWithArgs()&#123;</span><br><span class="line">var pages &#x3D; getCurrentPages() &#x2F;&#x2F;获取加载的页面</span><br><span class="line">var currentPage &#x3D; pages[pages.length-1] &#x2F;&#x2F;获取当前页面的对象</span><br><span class="line">var url &#x3D; currentPage.route &#x2F;&#x2F;当前页面url</span><br><span class="line">var options &#x3D; currentPage.options &#x2F;&#x2F;如果要获取url中所带的参数可以查看options</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;拼接url的参数</span><br><span class="line">var urlWithArgs &#x3D; url + &#39;?&#39;</span><br><span class="line">for(var key in options)&#123;</span><br><span class="line">var value &#x3D; options[key]</span><br><span class="line">urlWithArgs +&#x3D; key + &#39;&#x3D;&#39; + value + &#39;&amp;&#39;</span><br><span class="line">&#125;</span><br><span class="line">urlWithArgs &#x3D; urlWithArgs.substring(0, urlWithArgs.length-1)</span><br><span class="line"> </span><br><span class="line">return urlWithArgs</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">getCurrentPageUrl: getCurrentPageUrl,</span><br><span class="line">getCurrentPageUrlWithArgs: getCurrentPageUrlWithArgs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2、小程序跳转到其他小程序"><a href="#2、小程序跳转到其他小程序" class="headerlink" title="2、小程序跳转到其他小程序"></a>2、小程序跳转到其他小程序</h5><p> 在app.json文件中新增配置项：如下，<strong>navigateToMiniProgramAppIdList</strong> 就是新增的配置项目 </p>
<p>注：配置项目数量不能超过10条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; app.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cloud&quot;: true,</span><br><span class="line">  &quot;pages&quot;: [</span><br><span class="line">    &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;: &#123;</span><br><span class="line">    &quot;backgroundColor&quot;: &quot;#F6F6F6&quot;,</span><br><span class="line">    &quot;backgroundTextStyle&quot;: &quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#F6F6F6&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;QuickStart&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;: &quot;black&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;navigateToMiniProgramAppIdList&quot;: [</span><br><span class="line">    &quot;wx3efb95b9c5579418&quot;,</span><br><span class="line">    &quot;wxc1039e003593f9b4&quot;,</span><br><span class="line">    &quot;wxc75cac912af33647&quot;,</span><br><span class="line">    &quot;wx88bbae21474301ed&quot;,</span><br><span class="line">    &quot;wxd101b6b8f64db085&quot;,</span><br><span class="line">    &quot;wxd7c5b7d77ff1b238&quot;,</span><br><span class="line">    &quot;wxefe8997276c7a7d4&quot;,</span><br><span class="line">    &quot;wxbdfee33ea394a980&quot;,</span><br><span class="line">    &quot;wx8b3a98563fc40251&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、小程序注册登录，获取用户信息"><a href="#3、小程序注册登录，获取用户信息" class="headerlink" title="3、小程序注册登录，获取用户信息"></a>3、小程序注册登录，获取用户信息</h5><p> 可参考文章：<a href="https://developers.weixin.qq.com/doc/search.html?query=%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF&doc_type=miniprogram&jumpbackUrl=%2Fdoc%2F" target="_blank" rel="noopener">官方文档</a>    <a href="https://zhuanlan.zhihu.com/p/106267803?isappinstalled=0" target="_blank" rel="noopener">知乎分享文章</a></p>
<h5 id="4、小程序域名配置（wx-request所用域名）"><a href="#4、小程序域名配置（wx-request所用域名）" class="headerlink" title="4、小程序域名配置（wx.request所用域名）"></a>4、小程序域名配置（wx.request所用域名）</h5><p>可参考文章：<a href="https://cloud.tencent.com/developer/article/1483573" target="_blank" rel="noopener">腾讯云分享文章</a>  <a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html" target="_blank" rel="noopener">官方文档</a></p>
<p>微信小程序域名只支持https请求，在刚刚开始搭建https服务时，可能会出现此错误:   不在以下合法域名列表中，请参考文档</p>
<ol>
<li><p>首先需要在后台管理中添加请求的合法域名：</p>
</li>
<li><p>在app.js中配置好请求域名</p>
</li>
<li><p>在微信开发者工具-设置-项目设置中刷新一下域名信息，再对项目进行重新编译问题应该就能解决了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>学习</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>深入CocosCreator</title>
    <url>/2019/Cocos2/</url>
    <content><![CDATA[<p> 前文再续，书接上一回。 这几天一直在通过视频，文档，深入的了解CocosCreator，并对一些知识点做了一下总结笔记</p>
<a id="more"></a>

<h2 id="资源小知识点"><a href="#资源小知识点" class="headerlink" title="资源小知识点"></a>资源小知识点</h2><h3 id="1-跨项目导入导出资源"><a href="#1-跨项目导入导出资源" class="headerlink" title="1.跨项目导入导出资源"></a>1.跨项目导入导出资源</h3><p>操作流程：</p>
<p> （1）导出：文件 =&gt; 资源导出，选择 .fire场景文件，输出assets目录的 .zip压缩包。<br> （2）导入：文件 =&gt; 资源导入，选择压缩包源路径、解压路径，输出assets目录内容。</p>
<h3 id="2-图像资源自动剪裁"><a href="#2-图像资源自动剪裁" class="headerlink" title="2.图像资源自动剪裁"></a>2.图像资源自动剪裁</h3><p>​    基于size mode，尽量去除spriteFrame无像素的部分，减小图片尺寸。</p>
<hr>
<h2 id="场景小知识点"><a href="#场景小知识点" class="headerlink" title="场景小知识点"></a>场景小知识点</h2><h3 id="1-场景中的元素"><a href="#1-场景中的元素" class="headerlink" title="1.场景中的元素"></a><strong>1.场景中的元素</strong></h3><p>​    即是节点，可内嵌组件</p>
<h3 id="2-坐标系"><a href="#2-坐标系" class="headerlink" title="2.坐标系"></a><strong>2.坐标系</strong></h3><table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">坐标轴方向</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cocos坐标系（世界、本地坐标系）</td>
<td align="center">x右、y上、z外</td>
</tr>
<tr>
<td align="center">设备屏幕坐标系</td>
<td align="center">x右、y下</td>
</tr>
</tbody></table>
<h3 id="3-锚点"><a href="#3-锚点" class="headerlink" title="3.锚点"></a>3.锚点</h3><p><strong>作用：</strong>用于变换、子节点定位基准。</p>
<hr>
<h2 id="子系统重点"><a href="#子系统重点" class="headerlink" title="子系统重点"></a>子系统重点</h2><h3 id="1、渲染系统"><a href="#1、渲染系统" class="headerlink" title="1、渲染系统"></a>1、渲染系统</h3><p>​    对摄像机、渲染组件的了解。</p>
<h3 id="2、UI系统"><a href="#2、UI系统" class="headerlink" title="2、UI系统"></a>2、UI系统</h3><p>​    对widget、layout等UI组件的了解。</p>
<h3 id="3、动画系统"><a href="#3、动画系统" class="headerlink" title="3、动画系统"></a>3、动画系统</h3><p><strong>（1）创建动画的基本流程</strong><br> <strong>（2）时间曲线（双击动画线，进入编辑窗口）</strong><br> <strong>（3）事件管理（双击游标、加减按钮控制参数个数）</strong><br> <strong>（4）脚本控制</strong></p>
<h3 id="4、物理系统"><a href="#4、物理系统" class="headerlink" title="4、物理系统"></a>4、物理系统</h3><p><strong>碰撞组件（普通碰撞）</strong><br> （1）editing——是否为编辑模式<br> （2）regenerate points——计算图形边界，自定生成控制点，数值为控制点的生成密度 / 准确度<br> （3）ctrl + 点击——删除控制点<br> （4）组件类型：矩形、圆形、多边形<br> （5）设置碰撞组（项目 =&gt; 项目设置 =&gt; 分组设置）：<br> 制定分组 =&gt; 匹配分组 =&gt; 碰撞组件所在节点上，设置所属分组<br> （6）脚本控制</p>
<p><strong>Box2D物理引擎（高级碰撞）</strong></p>
<h3 id="5、音频系统"><a href="#5、音频系统" class="headerlink" title="5、音频系统"></a>5、音频系统</h3><p><strong>（1）audioSource组件</strong><br> <strong>（2）脚本控制</strong></p>
<hr>
<h2 id="脚本开发"><a href="#脚本开发" class="headerlink" title="脚本开发"></a>脚本开发</h2><h3 id="1、使用-cc-Class-声明类型"><a href="#1、使用-cc-Class-声明类型" class="headerlink" title="1、使用 cc.Class 声明类型"></a>1、使用 cc.Class 声明类型</h3><p><strong>（1）定义 CCClass</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Sprite = cc.Class(&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（2）实例化</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Sprite();</span><br></pre></td></tr></table></figure>

<p><strong>（3）判断类型</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cc.<span class="built_in">log</span>(obj instanceof Sprite);       <span class="comment">//使用原生JS的instanceof</span></span><br></pre></td></tr></table></figure>

<p><strong>（4）构造函数（ctor）</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Sprite = cc.Class(&#123;</span><br><span class="line">    <span class="comment">//使用ctor声明构造函数</span></span><br><span class="line">    ctor: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        cc.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Sprite);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（5）实例方法</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Sprite = cc.Class(&#123;</span><br><span class="line">    <span class="comment">// 声明一个名叫 "print" 的实例方法</span></span><br><span class="line">    print: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（6）继承（extends）</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">var</span> Shape = cc.Class();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">var</span> Rect = cc.Class(&#123;</span><br><span class="line">    <span class="comment">//使用 extends 实现继承</span></span><br><span class="line">    <span class="keyword">extends</span>: Shape</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（7）父构造函数</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Shape = cc.Class(&#123;</span><br><span class="line">    ctor: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        cc.log(<span class="string">"Shape"</span>);    <span class="comment">// 实例化时，父构造函数会自动调用，</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Rect = cc.Class(&#123;</span><br><span class="line">    extends: Shape</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Square = cc.Class(&#123;</span><br><span class="line">    extends: Rect,</span><br><span class="line">    ctor: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        cc.log(<span class="string">"Square"</span>);   <span class="comment">// 再调用子构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> Square();</span><br></pre></td></tr></table></figure>

<p><strong>（8）完整声明属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;简单类型声明</span><br><span class="line">properties: &#123;</span><br><span class="line">    score: &#123;</span><br><span class="line">        &#x2F;&#x2F;这几个参数分别指定了 score 的默认值为 0，在 属性检查器 里，其属性名将显示为：“Score (player)”，并且当鼠标移到参数上时，显示对应的 Tooltip。</span><br><span class="line">        default: 0,</span><br><span class="line">        displayName: &quot;Score (player)&quot;,</span><br><span class="line">        tooltip: &quot;The score of player&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组声明</span><br><span class="line">properties: &#123;</span><br><span class="line">    names: &#123;</span><br><span class="line">        default: [],</span><br><span class="line">        type: [cc.String]   &#x2F;&#x2F; 用 type 指定数组的每个元素都是字符串类型</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    enemies: &#123;</span><br><span class="line">        default: [],</span><br><span class="line">        type: [cc.Node]     &#x2F;&#x2F; type 同样写成数组，提高代码可读性</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;get&#x2F;set 声明</span><br><span class="line">properties: &#123;</span><br><span class="line">    width: &#123;</span><br><span class="line">        get: function () &#123;</span><br><span class="line">            return this._width;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function (value) &#123;</span><br><span class="line">            this._width &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>properties常用参数</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">default</td>
<td align="left">默认值</td>
</tr>
<tr>
<td align="left">type</td>
<td align="left">限定属性的数据类型</td>
</tr>
<tr>
<td align="left">visible</td>
<td align="left">若为false，则不在属性检查器面板中显示该属性</td>
</tr>
<tr>
<td align="left">serializable</td>
<td align="left">若为false，则不序列化（保存）该属性</td>
</tr>
<tr>
<td align="left">displayName</td>
<td align="left">在属性检查器面板中，显示成指定名字</td>
</tr>
<tr>
<td align="left">tooltip</td>
<td align="left">在属性检查器面板中，添加属性的Tooltip</td>
</tr>
</tbody></table>
<h3 id="2、访问节点和组件"><a href="#2、访问节点和组件" class="headerlink" title="2、访问节点和组件"></a>2、访问节点和组件</h3><p><strong>（1）获得组件所在的节点</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.node</span><br></pre></td></tr></table></figure>

<p><strong>（2）获得其它组件</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.getComponent(组件名)</span><br></pre></td></tr></table></figure>

<p><strong>（3）获得其它节点及其组件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Player.js</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    properties: &#123;</span><br><span class="line">        player: &#123;</span><br><span class="line">            default: null,</span><br><span class="line">            type: cc.Node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果你将属性的 type 声明为 Player 组件，当你拖动节点 &quot;Player Node&quot; 到 属性检查器，player 属性就会被设置为这个节点里面的 Player 组件</span><br><span class="line">&#x2F;&#x2F; Cannon.js</span><br><span class="line">var Player &#x3D; require(&quot;Player&quot;);</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    properties: &#123;</span><br><span class="line">        &#x2F;&#x2F; 声明 player 属性，这次直接是组件类型</span><br><span class="line">        player: &#123;</span><br><span class="line">            default: null,</span><br><span class="line">            type: Player</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找子节点</span><br><span class="line">&#x2F;&#x2F;返回子节点数组</span><br><span class="line">this.node.children</span><br><span class="line">&#x2F;&#x2F;返回对应的子节点</span><br><span class="line">this.node.getChildByName(子节点名);</span><br><span class="line">&#x2F;&#x2F;查找后代节点</span><br><span class="line">cc.find(子节点&#x2F;...&#x2F;后代节点, this.node);</span><br><span class="line">&#x2F;&#x2F;全局查找节点</span><br><span class="line">cc.find(场景&#x2F;节点&#x2F;节点&#x2F;...);</span><br></pre></td></tr></table></figure>

<p><strong>（4）访问已有变量里的值（通过模块访问）</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//专门开设一个中介模块，导出接口；在其他模块进行节点、组件、属性的操作</span></span><br><span class="line"><span class="comment">// Global.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    backNode: <span class="literal">null</span>,</span><br><span class="line">    backLabel: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Back.js</span></span><br><span class="line"><span class="keyword">var</span> Global = <span class="built_in">require</span>(<span class="string">"Global"</span>);</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Global.backNode = <span class="keyword">this</span>.node;</span><br><span class="line">        Global.backLabel = <span class="keyword">this</span>.getComponent(cc.Label);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnyScript.js</span></span><br><span class="line"><span class="keyword">var</span> Global = <span class="built_in">require</span>(<span class="string">"Global"</span>);</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="string">"Back"</span>;</span><br><span class="line">        Global.backLabel.string = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3、常用节点和组件接口"><a href="#3、常用节点和组件接口" class="headerlink" title="3、常用节点和组件接口"></a>3、常用节点和组件接口</h3><p><strong>（1）节点状态和层级操作</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//激活/关闭节点</span></span><br><span class="line"><span class="keyword">this</span>.node.active = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.node.active = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改节点的父节点</span></span><br><span class="line"><span class="keyword">this</span>.node.parent = parentNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//索引节点的子节点</span></span><br><span class="line"><span class="comment">//返回子节点数组</span></span><br><span class="line"><span class="keyword">this</span>.node.children</span><br><span class="line"><span class="comment">//返回子节点数量</span></span><br><span class="line"><span class="keyword">this</span>.node.childrenCount</span><br></pre></td></tr></table></figure>

<p><strong>（2）更改节点的变换（位置、旋转、缩放、尺寸）</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更改节点位置</span></span><br><span class="line"><span class="comment">//分别对 x 轴和 y 轴坐标赋值</span></span><br><span class="line"><span class="keyword">this</span>.node.x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">this</span>.node.y = <span class="number">50</span>;</span><br><span class="line"><span class="comment">//使用setPosition方法</span></span><br><span class="line"><span class="keyword">this</span>.node.setPosition(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">this</span>.node.setPosition(cc.v2(<span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line"><span class="comment">//设置position变量</span></span><br><span class="line"><span class="keyword">this</span>.node.position = cc.v2(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改节点旋转</span></span><br><span class="line"><span class="keyword">this</span>.node.rotation = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">this</span>.node.setRotation(<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改节点缩放</span></span><br><span class="line"><span class="keyword">this</span>.node.scaleX = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">this</span>.node.scaleY = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">this</span>.node.setScale(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">this</span>.node.setScale(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改节点尺寸</span></span><br><span class="line"><span class="keyword">this</span>.node.setContentSize(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">this</span>.node.setContentSize(cc.size(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"><span class="keyword">this</span>.node.width = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">this</span>.node.height = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改节点锚点位置</span></span><br><span class="line"><span class="keyword">this</span>.node.anchorX = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>.node.anchorY = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.node.setAnchorPoint(<span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（3）颜色和不透明度</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置颜色</span></span><br><span class="line">mySprite.node.color = cc.Color.RED;</span><br><span class="line"><span class="comment">//设置不透明度</span></span><br><span class="line">mySprite.node.opacity = <span class="number">128</span>;</span><br></pre></td></tr></table></figure>

<p><strong>（4）常用组件接口</strong><br> cc.Component 是所有组件的基类，任何组件都包括如下的常见接口：</p>
<table>
<thead>
<tr>
<th align="left">接口</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">this.node</td>
<td align="left">该组件所属的节点实例</td>
</tr>
<tr>
<td align="left">this.enabled</td>
<td align="left">是否每帧执行该组件的 update 方法，同时也用来控制渲染组件是否显示</td>
</tr>
<tr>
<td align="left">update(dt)</td>
<td align="left">作为组件的成员方法，在组件的 enabled 属性为 true 时，其中的代码会每帧执行</td>
</tr>
<tr>
<td align="left">onLoad()</td>
<td align="left">组件所在节点进行初始化时（节点添加到节点树时）执行</td>
</tr>
<tr>
<td align="left">start()</td>
<td align="left">会在该组件第一次 update 之前执行，通常用于需要在所有组件的 onLoad 初始化完毕后执行的逻辑</td>
</tr>
</tbody></table>
<h3 id="4、生命周期"><a href="#4、生命周期" class="headerlink" title="4、生命周期"></a>4、生命周期</h3><table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onLoad</td>
<td align="left">在节点首次激活时触发，或者所在节点被激活的情况下触发</td>
</tr>
<tr>
<td align="left">start</td>
<td align="left">在组件首次激活前</td>
</tr>
<tr>
<td align="left">update</td>
<td align="left">动画更新前</td>
</tr>
<tr>
<td align="left">lateUpdate</td>
<td align="left">动画更新后</td>
</tr>
<tr>
<td align="left">onEnable</td>
<td align="left">当组件的 enabled 属性从 false 变为 true 时，或者所在节点的 active 属性从 false 变为 true 时（倘若节点首次被创建且 enabled 为 true，则会在 onLoad 之后，start 之前被调用）</td>
</tr>
<tr>
<td align="left">onDisable</td>
<td align="left">当组件的 enabled 属性从 true 变为 false 时，或者所在节点的 active 属性从 true 变为 false 时</td>
</tr>
<tr>
<td align="left">onDestroy</td>
<td align="left">当组件或者所在节点调用了 destroy()时</td>
</tr>
</tbody></table>
<p><img src="https:////upload-images.jianshu.io/upload_images/11524092-7cf5b31340378b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440/format/webp" alt="img"></p>
<h3 id="5、创建和销毁节点"><a href="#5、创建和销毁节点" class="headerlink" title="5、创建和销毁节点"></a>5、创建和销毁节点</h3><p><strong>（1）创建新节点</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">  extends: cc.Component,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    sprite: &#123;</span><br><span class="line">      default: null,</span><br><span class="line">      type: cc.SpriteFrame,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  start: function () &#123;</span><br><span class="line">    &#x2F;&#x2F;动态创建节点，并将它加入到场景中</span><br><span class="line">    var node &#x3D; new cc.Node(&#39;Sprite&#39;);</span><br><span class="line">    var sp &#x3D; node.addComponent(cc.Sprite);</span><br><span class="line">    sp.spriteFrame &#x3D; this.sprite;</span><br><span class="line">    node.parent &#x3D; this.node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（2）克隆已有节点</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">  extends: cc.Component,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    target: &#123;</span><br><span class="line">      default: null,</span><br><span class="line">      type: cc.Node,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  start: function () &#123;</span><br><span class="line">    &#x2F;&#x2F;克隆场景中的已有节点</span><br><span class="line">    var scene &#x3D; cc.director.getScene();</span><br><span class="line">    var node &#x3D; cc.instantiate(this.target);</span><br><span class="line">    node.parent &#x3D; scene;</span><br><span class="line">    node.setPosition(0, 0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（3）创建预制节点</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">  extends: cc.Component,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    target: &#123;</span><br><span class="line">      default: null,</span><br><span class="line">      type: cc.Prefab,    &#x2F;&#x2F;预制</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  start: function () &#123;</span><br><span class="line">    var scene &#x3D; cc.director.getScene();</span><br><span class="line">    var node &#x3D; cc.instantiate(this.target);</span><br><span class="line">    node.parent &#x3D; scene;</span><br><span class="line">    node.setPosition(0, 0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（4）销毁节点</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">  extends: cc.Component,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    target: cc.Node,</span><br><span class="line">  &#125;,</span><br><span class="line">  start: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 5 秒后销毁目标节点</span></span><br><span class="line">    <span class="comment">//销毁节点并不会立刻被移除，而是在当前帧逻辑更新结束后，统一执行</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.target.destroy();</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">5000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params">dt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断当前节点是否已经被销毁</span></span><br><span class="line">    <span class="keyword">if</span> (cc.isValid(<span class="keyword">this</span>.target)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.target.rotation += dt * <span class="number">10.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：不要使用removeFromParent去销毁节点。<br> 原因：调用一个节点的 removeFromParent 后，它不一定就能完全从内存中释放，因为有可能由于一些逻辑上的问题，导致程序中仍然引用到了这个对象。</p>
</blockquote>
<h3 id="6、加载和切换场景"><a href="#6、加载和切换场景" class="headerlink" title="6、加载和切换场景"></a>6、加载和切换场景</h3><p><strong>（1）加载和切换</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从当前场景，切换到MyScene场景</span></span><br><span class="line">cc.director.loadScene(<span class="string">"MyScene"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（2）通过常驻节点，进行场景资源管理和参数传递</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常驻节点：不随场景切换，而自动销毁，为所有场景提供持久性信息</span></span><br><span class="line"><span class="comment">//设置常驻节点</span></span><br><span class="line">cc.game.addPersistRootNode(myNode);</span><br><span class="line"><span class="comment">//取消常驻节点，还原为一般场景节点</span></span><br><span class="line">cc.game.removePersistRootNode(myNode);</span><br></pre></td></tr></table></figure>

<p><strong>（3）场景加载回调</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fn：加载MyScene场景时触发</span></span><br><span class="line">cc.director.loadScene(<span class="string">"MyScene"</span>, <span class="function"><span class="keyword">fn</span>);</span></span><br></pre></td></tr></table></figure>

<p><strong>（4）预加载场景</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后台预加载场景</span></span><br><span class="line">cc.director.preloadScene(<span class="string">"MyScene"</span>, <span class="function"><span class="keyword">fn</span>);</span></span><br><span class="line"><span class="function">//有需要时，手动加载该场景</span></span><br><span class="line"><span class="function"><span class="title">cc</span>.<span class="title">director</span>.<span class="title">loadScene</span></span>(<span class="string">"MyScene"</span>, <span class="function"><span class="keyword">fn</span>);</span></span><br></pre></td></tr></table></figure>

<h3 id="7、获取和加载资源"><a href="#7、获取和加载资源" class="headerlink" title="7、获取和加载资源"></a>7、获取和加载资源</h3><p><strong>（1）资源属性的声明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; NewScript.js</span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    properties: &#123;</span><br><span class="line">        &#x2F;&#x2F;所有继承自 cc.Asset 的类型都统称资源，如 cc.Texture2D, cc.SpriteFrame, cc.AnimationClip, cc.Prefab 等</span><br><span class="line">        texture: &#123;</span><br><span class="line">            default: null,</span><br><span class="line">            type: cc.Texture2D</span><br><span class="line">        &#125;,</span><br><span class="line">        spriteFrame: &#123;</span><br><span class="line">            default: null,</span><br><span class="line">            type: cc.SpriteFrame</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（2）静态加载（在属性检查器里设置资源）</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewScript.js</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//拖拽资源管理器的资源，到属性检查器的脚本组件中，即可在脚本里拿到设置好的资源</span></span><br><span class="line">    <span class="keyword">var</span> spriteFrame = <span class="keyword">this</span>.spriteFrame;</span><br><span class="line">    <span class="keyword">var</span> texture = <span class="keyword">this</span>.texture;</span><br><span class="line">    spriteFrame.setTexture(texture);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（3）动态加载</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态加载的资源，需要存放于assets的子目录resources中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载单个资源</span></span><br><span class="line"><span class="comment">//cc.loader.loadRes(resources的相对路径, 类型(可选), 回调函数)</span></span><br><span class="line"><span class="comment">//加载Prefab资源</span></span><br><span class="line">cc.loader.loadRes(<span class="string">"test assets/prefab"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err, prefab)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = cc.instantiate(prefab);</span><br><span class="line">    cc.director.getScene().addChild(newNode);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载SpriteFrame</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">self</span> = this;</span><br><span class="line">cc.loader.loadRes(<span class="string">"test assets/image"</span>, cc.SpriteFrame, <span class="function"><span class="keyword">function</span> <span class="params">(err, spriteFrame)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">self</span>.node.getComponent(cc.Sprite).spriteFrame = spriteFrame;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量加载资源</span></span><br><span class="line"><span class="comment">//cc.loader.loadResDir(resources的相对路径, 类型(可选), 回调函数)</span></span><br><span class="line"><span class="comment">//加载test assets目录下所有资源</span></span><br><span class="line">cc.loader.loadResDir(<span class="string">"test assets"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err, assets)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载test assets目录下所有SpriteFrame，并且获取它们的路径</span></span><br><span class="line">cc.loader.loadResDir(<span class="string">"test assets"</span>, cc.SpriteFrame, <span class="function"><span class="keyword">function</span> <span class="params">(err, assets, urls)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//资源浅释放</span></span><br><span class="line"><span class="comment">//cc.loader.releaseRes(resources的相对路径, 类型(可选))</span></span><br><span class="line">cc.loader.releaseRes(<span class="string">"test assets/image"</span>, cc.SpriteFrame);</span><br><span class="line">cc.loader.releaseRes(<span class="string">"test assets/anim"</span>);</span><br><span class="line"><span class="comment">//cc.loader.releaseAsset(组件名)</span></span><br><span class="line">cc.loader.releaseAsset(spriteFrame);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源深释放，释放一个资源以及所有它依赖的资源</span></span><br><span class="line"><span class="keyword">var</span> deps = cc.loader.getDependsRecursively(<span class="string">'prefabs/sample'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（4）加载远程资源和设备资源</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载远程资源</span></span><br><span class="line"><span class="comment">//远程 url 带图片后缀名</span></span><br><span class="line"><span class="keyword">var</span> remoteUrl = <span class="string">"http://unknown.org/someres.png"</span>;</span><br><span class="line">cc.loader.load(remoteUrl, <span class="function"><span class="keyword">function</span> (<span class="params">err, texture</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//远程 url 不带图片后缀名，此时必须指定远程图片文件的类型</span></span><br><span class="line">remoteUrl = <span class="string">"http://unknown.org/emoji?id=124982374"</span>;</span><br><span class="line">cc.loader.load(&#123;<span class="attr">url</span>: remoteUrl, <span class="attr">type</span>: <span class="string">'png'</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载设备资源</span></span><br><span class="line"><span class="comment">//用绝对路径加载设备存储内的资源，比如相册</span></span><br><span class="line"><span class="keyword">var</span> absolutePath = <span class="string">"/dara/data/some/path/to/image.png"</span></span><br><span class="line">cc.loader.load(absolutePath, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加载限制：<br> 1、原生平台远程加载不支持图片文件以外类型的资源。<br> 2、这种加载方式只支持图片、声音、文本等原生资源类型，不支持SpriteFrame、SpriteAtlas、Tilemap等资源的直接加载和解析。（需要后续版本中的AssetBundle支持）<br> 3、Web端的远程加载受到浏览器的CORS跨域策略限制，如果对方服务器禁止跨域访问，那么会加载失败，而且由于WebGL安全策略的限制，即便对方服务器允许http请求成功之后也无法渲染。</p>
</blockquote>
<p><strong>（5）资源的依赖和释放</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接释放某个贴图</span></span><br><span class="line">cc.loader.release(texture);</span><br><span class="line"><span class="comment">// 释放一个 prefab 以及所有它依赖的资源</span></span><br><span class="line"><span class="keyword">var</span> deps = cc.loader.getDependsRecursively(<span class="string">'prefabs/sample'</span>);</span><br><span class="line">cc.loader.release(deps);</span><br><span class="line"><span class="comment">// 如果在这个 prefab 中有一些和场景其他部分共享的资源，你不希望它们被释放，可以将这个资源从依赖列表中删除</span></span><br><span class="line"><span class="keyword">var</span> deps = cc.loader.getDependsRecursively(<span class="string">'prefabs/sample'</span>);</span><br><span class="line"><span class="keyword">var</span> index = deps.indexOf(texture2d._uuid);</span><br><span class="line"><span class="keyword">if</span> (index !== <span class="number">-1</span>)</span><br><span class="line">    deps.splice(index, <span class="number">1</span>);</span><br><span class="line">cc.loader.release(deps);</span><br></pre></td></tr></table></figure>

<h3 id="8、监听和发射事件"><a href="#8、监听和发射事件" class="headerlink" title="8、监听和发射事件"></a>8、监听和发射事件</h3><p><strong>（1）监听事件</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//target是可选参数，用于绑定响应函数的调用者</span></span><br><span class="line"><span class="comment">//boolean是可选参数，默认为false，表示冒泡流</span></span><br><span class="line"><span class="keyword">this</span>.node.<span class="keyword">on</span>(<span class="keyword">event</span>, fn, target, boolean);</span><br></pre></td></tr></table></figure>

<p><strong>（2）关闭监听</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.off(<span class="keyword">event</span>, fn, target, boolean);</span><br></pre></td></tr></table></figure>

<p><strong>（3）发射事件</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为事件函数，提供参数，最多5个</span></span><br><span class="line"><span class="keyword">this</span>.node.emit(<span class="keyword">event</span>, arg1, arg2, arg3);</span><br></pre></td></tr></table></figure>

<p><strong>（4）派送事件</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//grandson.js</span></span><br><span class="line"><span class="comment">//升级版的on，冒泡到的节点，全部注册事件</span></span><br><span class="line"><span class="keyword">this</span>.node.dispatchEvent( <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">'foobar'</span>, <span class="literal">true</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//father.js</span></span><br><span class="line"><span class="comment">//在指定的上级节点中，注册相同的事件，阻止事件冒泡，手动停止派送</span></span><br><span class="line"><span class="keyword">this</span>.node.<span class="keyword">on</span>(<span class="string">'foobar'</span>, function (<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">event</span>.stopPropagation();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（5）事件对象（回调参数的event对象）</strong></p>
<table>
<thead>
<tr>
<th align="left">API 名</th>
<th align="left">类型</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">type</td>
<td align="left">String</td>
<td align="left">事件的类型（事件名）</td>
</tr>
<tr>
<td align="left">target</td>
<td align="left">cc.Node</td>
<td align="left">接收到事件的原始对象</td>
</tr>
<tr>
<td align="left">currentTarget</td>
<td align="left">cc.Node</td>
<td align="left">接收到事件的当前对象，事件在冒泡阶段当前对象可能与原始对象不同</td>
</tr>
<tr>
<td align="left">getType</td>
<td align="left">Function</td>
<td align="left">获取事件的类型</td>
</tr>
<tr>
<td align="left">stopPropagation</td>
<td align="left">Function</td>
<td align="left">停止冒泡阶段，事件将不会继续向父节点传递，当前节点的剩余监听器仍然会接收到事件</td>
</tr>
<tr>
<td align="left">stopPropagationImmediate</td>
<td align="left">Function</td>
<td align="left">立即停止事件的传递，事件将不会传给父节点以及当前节点的剩余监听器</td>
</tr>
<tr>
<td align="left">getCurrentTarget</td>
<td align="left">Function</td>
<td align="left">获取当前接收到事件的目标节点</td>
</tr>
<tr>
<td align="left">detail</td>
<td align="left">Function</td>
<td align="left">自定义事件的信息（属于 cc.Event.EventCustom）</td>
</tr>
<tr>
<td align="left">setUserData</td>
<td align="left">Function</td>
<td align="left">设置自定义事件的信息（属于 cc.Event.EventCustom）</td>
</tr>
<tr>
<td align="left">getUserData</td>
<td align="left">Function</td>
<td align="left">获取自定义事件的信息（属于 cc.Event.EventCustom）</td>
</tr>
</tbody></table>
<h3 id="9、节点系统事件"><a href="#9、节点系统事件" class="headerlink" title="9、节点系统事件"></a>9、节点系统事件</h3><p><strong>（1）鼠标事件类型和事件对象</strong></p>
<table>
<thead>
<tr>
<th align="left">枚举对象定义</th>
<th align="left">对应的事件名</th>
<th align="left">事件触发的时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cc.Node.EventType.MOUSE_DOWN</td>
<td align="left">mousedown</td>
<td align="left">当鼠标在目标节点区域按下时触发一次</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.MOUSE_ENTER</td>
<td align="left">mouseenter</td>
<td align="left">当鼠标移入目标节点区域时，不论是否按下</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.MOUSE_MOVE</td>
<td align="left">mousemove</td>
<td align="left">当鼠标在目标节点在目标节点区域中移动时，不论是否按下</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.MOUSE_LEAVE</td>
<td align="left">mouseleave</td>
<td align="left">当鼠标移出目标节点区域时，不论是否按下</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.MOUSE_UP</td>
<td align="left">mouseup</td>
<td align="left">当鼠标从按下状态松开时触发一次</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.MOUSE_WHEEL</td>
<td align="left">mousewheel</td>
<td align="left">当鼠标滚轮滚动时</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">返回值类型</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getScrollY</td>
<td align="left">Number</td>
<td align="left">获取滚轮滚动的 Y 轴距离，只有滚动时才有效</td>
</tr>
<tr>
<td align="left">getLocation</td>
<td align="left">Object</td>
<td align="left">获取鼠标位置对象，对象包含 x 和 y 属性</td>
</tr>
<tr>
<td align="left">getLocationX</td>
<td align="left">Number</td>
<td align="left">获取鼠标的 X 轴位置</td>
</tr>
<tr>
<td align="left">getLocationY</td>
<td align="left">Number</td>
<td align="left">获取鼠标的 Y 轴位置</td>
</tr>
<tr>
<td align="left">getPreviousLocation</td>
<td align="left">Object</td>
<td align="left">获取鼠标事件上次触发时的位置对象，对象包含 x 和 y 属性</td>
</tr>
<tr>
<td align="left">getDelta</td>
<td align="left">Object</td>
<td align="left">获取鼠标距离上一次事件移动的距离对象，对象包含 x 和 y 属性</td>
</tr>
<tr>
<td align="left">getButton</td>
<td align="left">Number</td>
<td align="left">cc.Event.EventMouse.BUTTON_LEFT或cc.Event.EventMouse.BUTTON_RIGHT或cc.Event.EventMouse.BUTTON_MIDDLE</td>
</tr>
</tbody></table>
<p><strong>（2）触摸事件类型和事件对象</strong></p>
<table>
<thead>
<tr>
<th align="left">枚举对象定义</th>
<th align="left">对应的事件名</th>
<th align="left">事件触发的时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cc.Node.EventType.TOUCH_START</td>
<td align="left">touchstart</td>
<td align="left">当手指触点落在目标节点区域内时</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.TOUCH_MOVE</td>
<td align="left">touchmove</td>
<td align="left">当手指在屏幕上目标节点区域内移动时</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.TOUCH_END</td>
<td align="left">touchend</td>
<td align="left">当手指在目标节点区域内离开屏幕时</td>
</tr>
<tr>
<td align="left">cc.Node.EventType.TOUCH_CANCEL</td>
<td align="left">touchcancel</td>
<td align="left">当手指在目标节点区域外离开屏幕时</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">API 名</th>
<th align="left">类型</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">touch</td>
<td align="left">cc.Touch</td>
<td align="left">与当前事件关联的触点对象</td>
</tr>
<tr>
<td align="left">getID</td>
<td align="left">Number</td>
<td align="left">获取触点的 ID，用于多点触摸的逻辑判断</td>
</tr>
<tr>
<td align="left">getLocation</td>
<td align="left">Object</td>
<td align="left">获取触点位置对象，对象包含 x 和 y 属性</td>
</tr>
<tr>
<td align="left">getLocationX</td>
<td align="left">Number</td>
<td align="left">获取触点的 X 轴位置</td>
</tr>
<tr>
<td align="left">getLocationY</td>
<td align="left">Number</td>
<td align="left">获取触点的 Y 轴位置</td>
</tr>
<tr>
<td align="left">getPreviousLocation</td>
<td align="left">Object</td>
<td align="left">获取触点上一次触发事件时的位置对象，对象包含 x 和 y 属性</td>
</tr>
<tr>
<td align="left">getStartLocation</td>
<td align="left">Object</td>
<td align="left">获取触点初始时的位置对象，对象包含 x 和 y 属性</td>
</tr>
<tr>
<td align="left">getDelta</td>
<td align="left">Object</td>
<td align="left">获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性</td>
</tr>
</tbody></table>
<p><strong>（3）其它事件</strong></p>
<table>
<thead>
<tr>
<th align="left">枚举对象定义</th>
<th align="left">对应的事件名</th>
<th align="left">事件触发的时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">无</td>
<td align="left">position-changed</td>
<td align="left">当位置属性修改时</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">rotation-changed</td>
<td align="left">当旋转属性修改时</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">scale-changed</td>
<td align="left">当缩放属性修改时</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">size-changed</td>
<td align="left">当宽高属性修改时</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">anchor-changed</td>
<td align="left">当锚点属性修改时</td>
</tr>
</tbody></table>
<blockquote>
<p>PS：枚举对象定义、事件名等价，在回调参数中，作用相同。</p>
</blockquote>
<h3 id="10、全局系统事件"><a href="#10、全局系统事件" class="headerlink" title="10、全局系统事件"></a>10、全局系统事件</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局系统事件的类型</span></span><br><span class="line">cc.SystemEvent.EventType.KEY_DOWN    <span class="comment">//键盘按下</span></span><br><span class="line">cc.SystemEvent.EventType.KEY_UP    <span class="comment">//键盘释放</span></span><br><span class="line">cc.SystemEvent.EventType.DEVICEMOTION    <span class="comment">//设备重力传感</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定、解除全局系统事件</span></span><br><span class="line">cc.systemEvent.<span class="keyword">on</span>(<span class="keyword">event</span>, fn, target, boolean);</span><br><span class="line">cc.systemEvent.off(<span class="keyword">event</span>, fn, target, boolean);</span><br></pre></td></tr></table></figure>

<h3 id="11、动作系统（变换系统）"><a href="#11、动作系统（变换系统）" class="headerlink" title="11、动作系统（变换系统）"></a>11、动作系统（变换系统）</h3><p><strong>（1）动作控制</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行动作</span></span><br><span class="line">node.runAction(action);</span><br><span class="line"><span class="comment">// 停止一个动作</span></span><br><span class="line">node.stopAction(action);</span><br><span class="line"><span class="comment">// 停止所有动作</span></span><br><span class="line">node.stopAllActions();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 action 设置 tag</span></span><br><span class="line"><span class="keyword">var</span> ACTION_TAG = <span class="number">1</span>;</span><br><span class="line">action.setTag(ACTION_TAG);</span><br><span class="line"><span class="comment">// 通过 tag 获取 action</span></span><br><span class="line">node.getActionByTag(ACTION_TAG);</span><br><span class="line"><span class="comment">// 通过 tag 停止一个动作</span></span><br><span class="line">node.stopActionByTag(ACTION_TAG);</span><br></pre></td></tr></table></figure>

<p><strong>（2）容器动作</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序执行</span></span><br><span class="line">cc.sequence(action1, action2, ...);</span><br><span class="line"><span class="comment">//并发执行</span></span><br><span class="line">cc.spawn(action1, action2, ...);</span><br><span class="line"><span class="comment">//指定次数，重复执行</span></span><br><span class="line">cc.<span class="keyword">repeat</span>(action, times)</span><br><span class="line"><span class="comment">//无限次数，重复执行</span></span><br><span class="line">cc.repeatForever(action)</span><br><span class="line"><span class="comment">//改变动作速度倍率，再执行</span></span><br><span class="line">cc.speed(action, rate)</span><br></pre></td></tr></table></figure>

<p><strong>（3）即时动作</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">cc.<span class="keyword">show</span>()    <span class="comment">//立即显示</span></span><br><span class="line">cc.<span class="keyword">hide</span>()    <span class="comment">//立即隐藏</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>（4）时间间隔动作</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cc.moveTo()    <span class="comment">//移动到目标位置</span></span><br><span class="line">cc.rotateTo()    <span class="comment">//旋转到目标角度</span></span><br><span class="line">cc.scaleTo()    <span class="comment">//将节点大小缩放到指定的倍数</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>（5）动作回调</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> finished = cc.callFunc(fn, target, arg);</span><br></pre></td></tr></table></figure>

<p><strong>（6）缓动动作</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> action = cc.scaleTo(<span class="number">0.5</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//使用easeIn曲线，丰富动作表现</span></span><br><span class="line">action.easing(cc.easeIn(<span class="number">3.0</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：可以使用<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.cocos.com%2Fcreator%2Fmanual%2Fzh%2Fscripting%2Ftween.html" target="_blank" rel="noopener">缓动系统</a>，代替动作系统。（缓动系统的API更简约）</p>
</blockquote>
<h3 id="12、计时器"><a href="#12、计时器" class="headerlink" title="12、计时器"></a>12、计时器</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//interval：以秒为单位的时间间隔</span></span><br><span class="line"><span class="comment">//repeat：重复次数</span></span><br><span class="line"><span class="comment">//delay：开始延时</span></span><br><span class="line"><span class="keyword">this</span>.schedule(fn, interval, repeat, delay)</span><br><span class="line"><span class="keyword">this</span>.unschedule(fn)</span><br></pre></td></tr></table></figure>

<h3 id="13、脚本执行顺序"><a href="#13、脚本执行顺序" class="headerlink" title="13、脚本执行顺序"></a>13、脚本执行顺序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">editor: &#123;</span><br><span class="line">        <span class="comment">//executionOrder越小，该组件相对其它组件就会越先执行（默认为0）</span></span><br><span class="line">        <span class="comment">//executionOrder只对 onLoad, onEnable, start, update 和 lateUpdate 有效，对 onDisable 和 onDestroy 无效</span></span><br><span class="line">        executionOrder: <span class="number">1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="14、标准网络接口"><a href="#14、标准网络接口" class="headerlink" title="14、标准网络接口"></a>14、标准网络接口</h3><p><strong>（1）XMLHttpRequest——短连接</strong><br> <strong>（2）WebSocket——长连接</strong></p>
<h3 id="15、对象池"><a href="#15、对象池" class="headerlink" title="15、对象池"></a>15、对象池</h3><p><strong>对象池的概念</strong><br> 在同一场景中，需要多次进行节点的生成、消失时，假如直接进行创建、销毁的操作，就会很浪费性能。因此，使用对象池，存储需要消失的节点，释放需要生成的节点，达到节点回收利用的目的。</p>
<p><strong>工作流程</strong><br> （1）初始化对象池</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">    enemyPrefab: cc.Prefab    <span class="comment">//准备预制资源</span></span><br><span class="line">&#125;,</span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.enemyPool = <span class="keyword">new</span> cc.NodePool();</span><br><span class="line">    <span class="keyword">let</span> initCount = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; initCount; ++i) &#123;</span><br><span class="line">        <span class="keyword">let</span> enemy = cc.instantiate(<span class="keyword">this</span>.enemyPrefab); <span class="comment">// 创建节点</span></span><br><span class="line">        <span class="keyword">this</span>.enemyPool.put(enemy); <span class="comment">// 通过 put 接口放入对象池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）从对象池请求对象</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">createEnemy: function (parentNode) &#123;</span><br><span class="line">    let enemy = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.enemyPool.size() &gt; <span class="number">0</span>) &#123; <span class="comment">// 通过 size 接口判断对象池中是否有空闲的对象</span></span><br><span class="line">        enemy = <span class="keyword">this</span>.enemyPool.<span class="keyword">get</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建</span></span><br><span class="line">        enemy = cc.instantiate(<span class="keyword">this</span>.enemyPrefab);</span><br><span class="line">    &#125;</span><br><span class="line">    enemy.parent = parentNode; <span class="comment">// 将生成的敌人加入节点树</span></span><br><span class="line">    enemy.getComponent(<span class="string">'Enemy'</span>).<span class="keyword">init</span>(); <span class="comment">//接下来就可以调用 enemy 身上的脚本进行初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）将对象返回对象池</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">onEnemyKilled: <span class="function"><span class="keyword">function</span> (<span class="params">enemy</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// enemy 应该是一个 cc.Node</span></span><br><span class="line">    <span class="keyword">this</span>.enemyPool.put(enemy); <span class="comment">// 和初始化时的方法一样，将节点放进对象池，这个方法会同时调用节点的 removeFromParent</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>清除对象池</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动清空对象池，销毁其中缓存的所有节点</span></span><br><span class="line">myPool.clear();</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>初识CocosCreator</title>
    <url>/2019/Cocos/</url>
    <content><![CDATA[<p>一直很喜欢打游戏，单机，手游，端游…都有玩，但是有时候会想，自己有没有可能做出一款小游戏来呢？出于好奇心，<del>抱着爱学习的态度，</del>找了一款较火的，学习成本较低的游戏引擎学习——CocosCreator</p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>引用官网的简单介绍： Cocos Creator 是以内容创作为核心，实现了脚本化、组件化和数据驱动的游戏开发工具。 具备了易于上手的内容生产工作流，以及功能强大的开发者工具套件，可用于实现游戏逻辑和高性能游戏效果。 </p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-点击链接官网"><a href="#1-点击链接官网" class="headerlink" title="1.点击链接官网"></a>1.<a href="https://www.cocos.com/" target="_blank" rel="noopener">点击链接官网</a></h3><h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h3><p>​     <strong>（1）下载引擎</strong> </p>
<p>​        <img src="https://pic.downk.cc/item/5e9ec012c2a9a83be57b3168.png" style="zoom:50%;" /></p>
<p>​     <strong>（2）一路next，安装成功后，注册账号</strong> </p>
<pre><code>**（3）打开hello world模板项目**</code></pre><img src="https://pic.downk.cc/item/5e9ec0b7c2a9a83be57bc20f.jpg" style="zoom:50%;" />

<h2 id="编辑器界面"><a href="#编辑器界面" class="headerlink" title="编辑器界面"></a>编辑器界面</h2><p>这是默认布局，还可以按自己需求设置经典布局和竖屏游戏布局</p>
<img src="https://pic.downk.cc/item/5e9ec833c2a9a83be582d742.jpg" style="zoom:50%;" />

<h3 id="重点模块展示"><a href="#重点模块展示" class="headerlink" title="重点模块展示"></a>重点模块展示</h3><h4 id="1、资源管理器"><a href="#1、资源管理器" class="headerlink" title="1、资源管理器"></a>1、资源管理器</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-76cefb1b0a7e3cee.png?imageMogr2/auto-orient/strip|imageView2/2/w/249/format/webp" alt="img" style="zoom:67%;" />

<h4 id="2、场景编辑器"><a href="#2、场景编辑器" class="headerlink" title="2、场景编辑器"></a>2、场景编辑器</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-78cf1221db080d2c.png?imageMogr2/auto-orient/strip|imageView2/2/w/616/format/webp" alt="img" style="zoom:67%;" />

<h4 id="3、层级管理器"><a href="#3、层级管理器" class="headerlink" title="3、层级管理器"></a>3、层级管理器</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-595caee19e579838.png?imageMogr2/auto-orient/strip|imageView2/2/w/246/format/webp" alt="img" style="zoom:67%;" />

<h4 id="4、属性检查器"><a href="#4、属性检查器" class="headerlink" title="4、属性检查器"></a>4、属性检查器</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-5ff5a490b7583a9a.png?imageMogr2/auto-orient/strip|imageView2/2/w/382/format/webp" alt="img" style="zoom:67%;" />

<h4 id="5、控件库"><a href="#5、控件库" class="headerlink" title="5、控件库"></a>5、控件库</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-e7361ac4e841ab53.png?imageMogr2/auto-orient/strip|imageView2/2/w/336/format/webp" alt="img" style="zoom:67%;" />

<h4 id="6、工具栏"><a href="#6、工具栏" class="headerlink" title="6、工具栏"></a>6、工具栏</h4><p><img src="https:////upload-images.jianshu.io/upload_images/11524092-fcbceb50e6b4ddf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<h4 id="7、设置（文件-gt-设置）"><a href="#7、设置（文件-gt-设置）" class="headerlink" title="7、设置（文件 =&gt; 设置）"></a>7、设置（文件 =&gt; 设置）</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-81924955d27f12c9.png?imageMogr2/auto-orient/strip|imageView2/2/w/734/format/webp" alt="img" style="zoom:67%;" />

<h4 id="8、项目设置（项目-gt-项目设置）"><a href="#8、项目设置（项目-gt-项目设置）" class="headerlink" title="8、项目设置（项目 =&gt; 项目设置）"></a>8、项目设置（项目 =&gt; 项目设置）</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-2c123c25f2fecb4a.png?imageMogr2/auto-orient/strip|imageView2/2/w/734/format/webp" alt="img" style="zoom:67%;" />

<h4 id="9、构建发布（项目-gt-构建发布）"><a href="#9、构建发布（项目-gt-构建发布）" class="headerlink" title="9、构建发布（项目 =&gt; 构建发布）"></a>9、构建发布（项目 =&gt; 构建发布）</h4><img src="https:////upload-images.jianshu.io/upload_images/11524092-a6b7841ee802ea68.png?imageMogr2/auto-orient/strip|imageView2/2/w/820/format/webp" alt="img" style="zoom:67%;" />

<hr>
<h3 id="重点模块简述"><a href="#重点模块简述" class="headerlink" title="重点模块简述"></a>重点模块简述</h3><table>
<thead>
<tr>
<th align="left">模块</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">资源管理器</td>
<td align="left">assets目录文件操作</td>
</tr>
<tr>
<td align="left">场景编辑器</td>
<td align="left">场景节点变换、对齐方式</td>
</tr>
<tr>
<td align="left">层级管理器</td>
<td align="left">场景节点管理</td>
</tr>
<tr>
<td align="left">属性检查器</td>
<td align="left">参数控制</td>
</tr>
<tr>
<td align="left">控件库</td>
<td align="left">内置控件、自定义控件（预制控件）</td>
</tr>
<tr>
<td align="left">工具栏</td>
<td align="left">变换模式切换、变换手柄模式切换、预览、打开文件夹</td>
</tr>
<tr>
<td align="left">设置</td>
<td align="left">编辑器配置</td>
</tr>
<tr>
<td align="left">项目设置</td>
<td align="left">可视化的项目配置，保存于settings/project.json</td>
</tr>
<tr>
<td align="left">构建发布</td>
<td align="left">项目打包</td>
</tr>
</tbody></table>
<blockquote>
<p>PS：在层级管理器中，资源越靠后，则在场景编辑器中，层叠等级越高。（与Photoshop等视觉设计软件的图层操作相反）</p>
</blockquote>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ProjectName（新建项目）</span><br><span class="line">├──assets</span><br><span class="line">├──library</span><br><span class="line">├──local</span><br><span class="line">├──packages</span><br><span class="line">├──settings</span><br><span class="line">├──temp</span><br><span class="line">└──project.json</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">子结构</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">assets</td>
<td align="left">与资源管理器的内容同步，游戏的核心目录（每个文件都有相应.meta文件）</td>
</tr>
<tr>
<td align="left">library</td>
<td align="left">这里文件的结构和资源的格式将被处理成最终游戏发布时需要的形式</td>
</tr>
<tr>
<td align="left">local</td>
<td align="left">编辑器使用习惯记录（如：窗体布局）</td>
</tr>
<tr>
<td align="left">settings</td>
<td align="left">项目设置</td>
</tr>
<tr>
<td align="left">project.json</td>
<td align="left">版本控制，必须与assets共同存在</td>
</tr>
<tr>
<td align="left">build</td>
<td align="left">打包导出目录，构建项目时，自动生成</td>
</tr>
</tbody></table>
<blockquote>
<p>PS：.meta文件——记录某资源在项目中的唯一标识，以及其配置信息，只有在编辑器中对资源做修改，.meta文件才会实时变化。因此，不要在编辑器外，对资源的内容进行操作。</p>
</blockquote>
<hr>
<h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><h3 id="1、场景（scene）"><a href="#1、场景（scene）" class="headerlink" title="1、场景（scene）"></a>1、场景（scene）</h3><p><strong>自动释放资源：</strong>切换场景后，上一个场景中的资源，从内存中释放。<br> <strong>延迟加载资源：</strong>意味着不用等待所有资源加载完毕，才显示场景。（快速切换场景，资源陆续在画面显示）</p>
<h3 id="2、贴图（texture）"><a href="#2、贴图（texture）" class="headerlink" title="2、贴图（texture）"></a>2、贴图（texture）</h3><p>普通图，子层为一张spriteFrame。</p>
<h3 id="3、预制（prefab）"><a href="#3、预制（prefab）" class="headerlink" title="3、预制（prefab）"></a>3、预制（prefab）</h3><p>创建方式：拖拽场景节点，到资源管理器。</p>
<h3 id="4、图集（atlas）"><a href="#4、图集（atlas）" class="headerlink" title="4、图集（atlas）"></a>4、图集（atlas）</h3><p>精灵图，子层为多张spriteFrame。（精灵图合成软件：TexturePacker、Zwoptex）</p>
<h3 id="5、自动图集（auto-atlas）"><a href="#5、自动图集（auto-atlas）" class="headerlink" title="5、自动图集（auto-atlas）"></a>5、自动图集（auto-atlas）</h3><p>打包时，将所在目录中的所有碎图，合成为图集。</p>
<h3 id="6、艺术数字（label-atlas）"><a href="#6、艺术数字（label-atlas）" class="headerlink" title="6、艺术数字（label-atlas）"></a>6、艺术数字（label-atlas）</h3><p>数字为内容的图集。</p>
<h3 id="7、字体（font）"><a href="#7、字体（font）" class="headerlink" title="7、字体（font）"></a>7、字体（font）</h3><p>动态字体：.ttf<br> 位图字体：.fnt + .png（存在于同一目录）</p>
<h3 id="8、粒子（particle）"><a href="#8、粒子（particle）" class="headerlink" title="8、粒子（particle）"></a>8、粒子（particle）</h3><p>小型动画</p>
<h3 id="9、声音（audio）"><a href="#9、声音（audio）" class="headerlink" title="9、声音（audio）"></a>9、声音（audio）</h3><p><strong>模式：</strong>web audio、dom audio</p>
<h3 id="10、骨骼动画（spine-dragonBones）"><a href="#10、骨骼动画（spine-dragonBones）" class="headerlink" title="10、骨骼动画（spine / dragonBones）"></a>10、骨骼动画（spine / dragonBones）</h3><table>
<thead>
<tr>
<th align="center">文件格式</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.json</td>
<td align="center">骨骼数据</td>
</tr>
<tr>
<td align="center">.png</td>
<td align="center">图集纹理</td>
</tr>
<tr>
<td align="center">.txt / .atlas</td>
<td align="center">图集数据</td>
</tr>
</tbody></table>
<h3 id="11、瓦片图（tiledMap）"><a href="#11、瓦片图（tiledMap）" class="headerlink" title="11、瓦片图（tiledMap）"></a>11、瓦片图（tiledMap）</h3><table>
<thead>
<tr>
<th align="center">文件格式</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.tmx</td>
<td align="center">地图数据</td>
</tr>
<tr>
<td align="center">.png</td>
<td align="center">图集纹理</td>
</tr>
<tr>
<td align="center">.tsx tileset</td>
<td align="center">数据配置文件</td>
</tr>
</tbody></table>
<h3 id="12、文本（text）"><a href="#12、文本（text）" class="headerlink" title="12、文本（text）"></a>12、文本（text）</h3><h3 id="13、脚本（script）"><a href="#13、脚本（script）" class="headerlink" title="13、脚本（script）"></a>13、脚本（script）</h3><h3 id="14、json"><a href="#14、json" class="headerlink" title="14、json"></a>14、json</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索的小窍门</title>
    <url>/2019/Search/</url>
    <content><![CDATA[<p>  以前搜索从来只会有用百度，如果找不到就一直从第一页翻下去…最后还是没找到，更别说找到有价值的内容了。我们正处在一个高速发展的互联网大数据时代，得数据者得天下，如何善用大数据成为了一门学问，<strong>善用搜索和强化搜索意识可以减少信息不对称，有助于我们解决问题和多维度思考问题。</strong></p>
<a id="more"></a>

<p> 如何才能提高搜索能力，让我们更快更准确地找到想要的内容呢？事实上，完成一次搜索会经历这样五个步骤：<strong>1，关键词。2，搜索引擎。3，搜索表达式。4，筛选结果。5，选择结果。</strong> </p>
<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p><strong>关键词是我们开始搜索的出发点</strong>，关键词的选择就在于如何准确描述自己想要搜索的内容。首先，<strong>关键词选择应该是单词、短语或者词组，而不是一个句子</strong>。比如“什么警匪类的电影比较好看？”只需要输入“电影 警匪”即可，如果搜索结果不满意，则继续添加新的关键词。</p>
<p>如果还不满意，则可以尝试把关键词换成同义词，比如“XX 迅雷下载”可以换成“XX 磁力下载”。还是不满意的话，可以尝试换一种语言搜索，因为互联网上的英文数据存储量是中文的 10 倍以上。比如“冰雪奇缘 壁纸”可以换成“Frozen Wallpaper”。</p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>搜索引擎的选择对于搜索结果的影响是最为关键的。</p>
<p>使用综合性的搜索引擎（比如谷歌百度），可以解决日常搜索 80% 的情况（二八定律）。如果想要搜索特定的结果，我们就要使用细分的搜索引擎，比如搜索图片可以用谷歌百度的图片搜索，又比如用谷歌搜索英文内容时，应该使用”<strong>Google No Country Redirect</strong>“来搜索，这一点在《<a href="https://www.runningcheese.com/google-search" target="_blank" rel="noopener">默认搜索引擎</a>》一文有专门介绍。</p>
<p>剩下 20% 的搜索情况更具搜索价值，则需要使用专业的垂直搜索引擎，它不仅更快，而且也能搜索到综合性引擎搜索不到的内容。比如搜索最新鲜的资讯你需要用”微博“搜索引擎，论文搜索你要用”文献“搜索引擎，图片搜索你需要用专业的图库网站来搜索。</p>
<p>因此，我们可以将常用的搜索引擎保存到浏览器，它包括“<strong>名称、关键字、搜索链接</strong>”三个部分。名称和关键字写什么都行，搜索链接的获取方法也很简单，在网站提供的搜索框内，输入任意内容，点击搜索后查看浏览器地址栏链接的变化，复制该条链接，并将链接中的搜索内容部分换成 %s 即可。</p>
<h2 id="搜索表达式"><a href="#搜索表达式" class="headerlink" title="搜索表达式"></a>搜索表达式</h2><p> <strong>搜索表达式是最容易被忽视的步骤。</strong>大多数用户都还是停留在搜索框中输入一两个关键字，然后点击搜索按钮的阶段。运气好你可以在第一页就得到结果，否则你得不停的翻页来得到结果，学习一些常用的检索表达式是一件低投入、高回报、受益终身的事情，而且搜索表达式在绝大多数搜索引擎上都是适用的。 </p>
<table>
<thead>
<tr>
<th><strong>检索表达式</strong></th>
<th><strong>介绍</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>搜索关键词A的同时屏蔽关于关键词B的信息</td>
<td>吉他 -广告</td>
</tr>
<tr>
<td>|</td>
<td>同时搜索关键词多个关键词, |可以用OR代替, OR需要大写</td>
<td>营养|早餐, 营养 OR 早餐</td>
</tr>
<tr>
<td>“”</td>
<td>要求查询结果要精确匹配，不包括演变形式（即引号内的内容须连贯匹配，不能断续）</td>
<td>“Failure is the mother of success”</td>
</tr>
<tr>
<td>*</td>
<td>只适用于英文，添加一个星号以表示任何未知或不确定的字词。</td>
<td>“* is the mother of success”</td>
</tr>
<tr>
<td>《》</td>
<td>只适用于中文，要求查询结果是关于这部作品，而不是普通的词语</td>
<td>《游戏改变世界》</td>
</tr>
<tr>
<td>site:</td>
<td>仅从特定网站或网域获得搜索结果</td>
<td>site:qq.com</td>
</tr>
<tr>
<td>inurl:</td>
<td>查找在URL地址里有搜索关键词的页面</td>
<td>inurl:qq</td>
</tr>
<tr>
<td>intitle:</td>
<td>查找在网页标题里有搜索关键词的页面</td>
<td>intitle:qq</td>
</tr>
<tr>
<td>filetype:</td>
<td>查找pdf,xml,xls,txt,doc,csv等特定格式的结果</td>
<td>filetype:pdf qq</td>
</tr>
<tr>
<td>混合搜索</td>
<td>同时使用多个检索表达式，比如：<a href="https://www.runningcheese.com/go?url=https://www.baidu.com/s?wd=site%3Aqq.com+" target="_blank" rel="noopener"firefox"+-quantum">site:qq.com “firefox” -quantum</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="筛选结果"><a href="#筛选结果" class="headerlink" title="筛选结果"></a>筛选结果</h2><p> <strong>筛选搜索结果为的是获得更精准的搜索结果。</strong>不要只是在逛淘宝时才用到搜索筛选，比如搜索视频可以按播放次数排列，搜索答案时按最多点赞排列，新闻搜索时按最新发布时间排列。很多搜索引擎都有“高级搜索”的设置，比如可以设置搜索范围，比如可以设置筛选某一个时间阶段的内容。 </p>
<h2 id="选择结果"><a href="#选择结果" class="headerlink" title="选择结果"></a>选择结果</h2><p>在得到比较满意的搜索结果后，按住 Ctrl 键点击搜索结果就会在新的标签页面打开，这样可以方便对比结果。如果搜索的结果因为一些原因打不开了，可以利用“网页快照”的功能来重新查看。如果想要知道这个网页的旧版本，可以使用”互联网档案馆“（<a href="https://www.runningcheese.com/go?url=http://www.archive.org" target="_blank" rel="noopener">Internet Archive</a>）来查看。</p>
<p>当搜索结果不完整或者不是最初的资料来源时，可以选择其中的一串文字来重新搜索（10个汉字或者英文单词），在这一串文字的两端最好加上双引号（“”），这样能够更精准的匹配。</p>
<h2 id="一些较有用的各领域资源网站"><a href="#一些较有用的各领域资源网站" class="headerlink" title="一些较有用的各领域资源网站"></a>一些较有用的各领域资源网站</h2><h3 id="1、专业的内容垂直查询网"><a href="#1、专业的内容垂直查询网" class="headerlink" title="1、专业的内容垂直查询网"></a>1、专业的内容垂直查询网</h3><ul>
<li><a href="http://hao.199it.com/" target="_blank" rel="noopener">大数据导航</a></li>
<li><a href="http://www.lsjgcx.com/" target="_blank" rel="noopener">历史价格查询</a></li>
<li><a href="https://www.chongbuluo.com/" target="_blank" rel="noopener">虫部落</a></li>
</ul>
<h3 id="2、查论文"><a href="#2、查论文" class="headerlink" title="2、查论文"></a>2、查论文</h3><p>国内主要是中国知网，万方，维普，中国科学引文数据<br>国外主要是SCI，EI</p>
<h3 id="3、搜索引擎"><a href="#3、搜索引擎" class="headerlink" title="3、搜索引擎"></a>3、搜索引擎</h3><p>谷歌，谷歌学术，百度（真心不咋地），谷歌学术代理”glgoo”</p>
<h3 id="4、查专利"><a href="#4、查专利" class="headerlink" title="4、查专利"></a>4、查专利</h3><p>国内，广州大数据，佰腾，<br>国外，康帕斯（Kompass），Factiva，Gale<br>注意，查专利时，可以使用单位名称，或者董事长总经理名字搜索。</p>
<h3 id="5、查标准"><a href="#5、查标准" class="headerlink" title="5、查标准"></a>5、查标准</h3><p>中标网，工标网</p>
<h3 id="6、获取关键词"><a href="#6、获取关键词" class="headerlink" title="6、获取关键词"></a>6、获取关键词</h3><p>（1）中国知网的 术语规范<br>（2）维普高级搜索中的 同义词<br>（3）万方高级检索</p>
<h2 id="常用资源平台"><a href="#常用资源平台" class="headerlink" title="常用资源平台"></a>常用资源平台</h2><h3 id="1、贴吧、论坛、知乎"><a href="#1、贴吧、论坛、知乎" class="headerlink" title="1、贴吧、论坛、知乎"></a>1、贴吧、论坛、知乎</h3><h3 id="2、资源集合网"><a href="#2、资源集合网" class="headerlink" title="2、资源集合网"></a>2、资源集合网</h3><p><strong>（1）综合</strong><br> <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.sucaitu.cc%2F" target="_blank" rel="noopener">https://www.sucaitu.cc/</a></p>
<p><strong>（2）软件</strong><br> <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.nocmd.com%2F" target="_blank" rel="noopener">https://www.nocmd.com/</a><br> <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fm.anxia.com%2Fw%2F" target="_blank" rel="noopener">http://m.anxia.com/w/</a></p>
<h3 id="3、微博、博客"><a href="#3、微博、博客" class="headerlink" title="3、微博、博客"></a>3、微博、博客</h3><h3 id="4、QQ、微信"><a href="#4、QQ、微信" class="headerlink" title="4、QQ、微信"></a>4、QQ、微信</h3><h3 id="5、B站"><a href="#5、B站" class="headerlink" title="5、B站"></a>5、B站</h3><h3 id="6、淘宝、闲鱼"><a href="#6、淘宝、闲鱼" class="headerlink" title="6、淘宝、闲鱼"></a>6、淘宝、闲鱼</h3>]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>技能</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>《游戏改变世界》读后感</title>
    <url>/2019/Game/</url>
    <content><![CDATA[<p>  游戏化如何让现实变得更美好 ， 现实世界存在太多不足和缺陷 ， 游戏化可以让现实变得更美好。 —— 这是此书作者主要观点</p>
<a id="more"></a>

<ul>
<li>作者在书中用大量事例告诉我们，游戏击中了人类幸福的核心，提供了令人愉悦的奖励、刺激性的挑战和宏大的胜利，而这些都是现实世界十分匮乏的。她的研究表明，我们可以借助游戏的力量，让生活变得像游戏一样精彩。 </li>
<li>作者指出了游戏化将要实现的四大目标：更满意的工作、更有把握的成功、更强的社会联系及更宏大的意义，并用大量实践告诉我们该如何驾驭游戏的力量，解决现实问题，并提升幸福感。她告诫我们：如果人们继续忽视游戏，在不远的未来，就会处在极端不利的地位。 </li>
</ul>
<p>这本书给我的感觉就是作者在写作中有点不够负责任，否则至少应该告诉读者，游戏世界之所以显得更迷人、让人流连忘放、沉迷其中，是因为游戏世界比现实世界简单太多，再复杂的游戏，其核心机制都是简单的，否则何来快速反馈，再简单的世界，其影响因素都非常多，且很多因素有很高的不确定性。不是游戏世界有多高深，而是现实世界太精妙。你只能说游戏的机制引入某些场景会更能激发用户参与，比如在教育过程中适当引入反馈机制，可能会提高学生的学习乐趣，这里还要强调适当，因为如果大家习惯了游戏中那么明显的反馈机制，是难以适应现实的，现实从不会如此慷慨，你会更加失望。</p>
<h2 id="游戏的四大特点"><a href="#游戏的四大特点" class="headerlink" title="游戏的四大特点"></a>游戏的四大特点</h2><p>了解游戏，首先要了解游戏的特点：所有的游戏都有4个决定性特征：目标、规则、反馈系统和自愿参与。这四个特征已经明显地告诉我们，为何那么多人沉迷于游戏，其中快速反馈是吸引人的核心所在，而目标和规则的合理设计都是为了能够产生快速反馈，自愿参与特征则更能让玩家在遇到障碍时坚持下去，以获得更好的反馈体验。现实不那么吸引人，因为现实生活没有这样的快速反馈机制，现实中一个甘愿接受延迟满足的人往往会更有自制力、更容易获得成就，现实和游戏就是如此背离，一个鼓励快速反馈，一个褒奖延迟满足。所以这本书的三观歪塌就在这里，不区分现实要求和游戏环境，而是屁股决定脑袋宣称游戏的完美。</p>
<h2 id="玩乐对立于抑郁，而不是工作。"><a href="#玩乐对立于抑郁，而不是工作。" class="headerlink" title="玩乐对立于抑郁，而不是工作。"></a>玩乐对立于抑郁，而不是工作。</h2><p>现实中，能够自己选定事业和生活目标，并为之不断努力的人，能获得心流体验，体会快乐的，这样的快乐远比游戏中持续的多。退出游戏界面，如果没有强劲的现实支撑，剩下的只是空虚而已。所以每个人的生活重点都是找到自己的兴趣所在和使命归属，这样的现实生活才更有意义。</p>
<p>当然，游戏作为主动型娱乐，其强烈的参与感，确实会带来更多乐趣。高风险工作、重复工作、脑力工作、体力工作、探索性工作、团队工作和创造性工作，这些艰苦工作出现在游戏里，剧作家诺埃尔·科沃德曾说过“工作比娱乐更有趣。”这句话可能未必有错。我承认游戏作为娱乐的积极作用，相对于被动式和低投入度的娱乐活动，游戏能够帮忙让我们享受到艰苦工作的乐趣，体会正面和良性的压力。</p>
<h2 id="做任何事情，不一定要想着尽力而为，应该是想着如何享受其中"><a href="#做任何事情，不一定要想着尽力而为，应该是想着如何享受其中" class="headerlink" title="做任何事情，不一定要想着尽力而为，应该是想着如何享受其中"></a>做任何事情，不一定要想着尽力而为，应该是想着如何享受其中</h2><p>人类幸福的最高形式是紧张、乐观地投入到周围的世界，能持续可靠地产生心流，自我选择的目标、障碍以及持续不断的反馈。当然设计精良的游戏，同样基于这三大元素为玩家提供心流。</p>
<p>视频游戏所有的情绪力量只来自于以下事实：它们提供有趣的障碍、更好的反馈和适应性更强的挑战，它们极为擅长一件事：唤起更多的心流和自豪体验，让人欲罢不能。事实上，这就是早期视频游戏的关键：让玩家尽量长时间地玩下去。雅达利最广为人知的一个口号就是：“发现你究竟能走多远。”这就是游戏的深度，好的游戏能够不断为玩家提供挑战、障碍和反馈，在尽量长的时间内吸引玩家。</p>
<p>一次强烈的心流体验，可以在此后几个小时、甚至几天让我们心情愉悦。但它是一种极端的投入状态，最终会耗尽我们的体力和精力。我们不能随心所欲无限制地一直处在心流中。按照凯斯的说法，这就是为什么人类繁荣需要一种更“持续”的幸福方法，不能只有心流。太多的心流会导致幸福倦怠，与此同时，太多的自豪会让人上瘾。研究人员认为，一些玩家对心爱的游戏“上瘾”，最大的潜在原因就是自豪感。打完一个游戏后的兴高采烈，总是伴随着可怕的空虚感带来的一丝丝刺痛。</p>
<p>虽然我说了很多批评这本书的地方，但关于积极心理学的探讨还是值得看看的，人到中年，总会觉得生活平淡了，快乐的和悲伤的感觉都不再强烈，我们如何让自己真正幸福呢？虽然这本书在讲述游戏时非常偏激，很多观点都难以认同，我就权当它是本有关幸福的书来读了。积极心理学领域出现了多种相互矛盾的幸福理论，但如果说有一件事是所有积极心理学家都认同的，那就是：实现幸福有多种途径，但我们就是发现不了幸福。没有哪一种物体、事件、结果或生活环境一定能给我们带来真正的幸福。我们必须自己创造幸福：从事艰苦工作，从事那些能带来奖励的活动。一方面，如果我们尝试在自身之外寻找幸福，就把焦点放在了积极心理学家称为“外在”奖励的东西上，即金钱、物质、地位或赞许。“享乐适应”，它是长期保持生活满意的最大障碍之一。追求外在奖励，注定会妨碍我们达成自身的幸福。另一方面，如果我们着手自己创造幸福，就把焦点放在了产生内在奖励的活动上，即通过强烈投入周围世界所产生的积极情绪、个人优势和社会联系来收获幸福。我们所做的事情，能因充分投入而带来享受，就足够了，这是“自成目的”的，强烈的投入感又是我们能体验到的最愉悦、最满足、最有意义的情绪状态。源自内在奖励的幸福有着令人难以置信的适应性。每当我们从事自成目的活动，就出现了一种与享乐适应完全相反的情况：我们不再通过消费和获得而实现愉悦，开始培养自己的享乐韧性。我们自己才是幸福的唯一来源。科学家已经证明，对外在奖励的享乐适应会导致我们沉溺于快捷的幸福行为，一步步走向失控，直到它们失去效果，或是让我们承受不起，甚至最终害死我们。</p>
<h2 id="自我奖励（内在、外在配合）是提升幸福感的方法。"><a href="#自我奖励（内在、外在配合）是提升幸福感的方法。" class="headerlink" title="自我奖励（内在、外在配合）是提升幸福感的方法。"></a>自我奖励（内在、外在配合）是提升幸福感的方法。</h2><p>内在奖励会让我们更幸福，让生活更美好，内在奖励分为4大类型：</p>
<p>1.我们每一天都在渴望满意的工作，何为满意的工作？有目标、有进展是满意工作的初始点。</p>
<p>2.我们渴望体验成功，至少也是希望成功。希望感觉到自己在生活中的强大，向他人展示强项，希望对成功的机会保持乐观态度，觉得自己越来越好。不要惧怕失败。</p>
<p>3.我们渴望与社会建立联系。哪怕是最内敛的人，也有很大一部分幸福来自与心爱的人共度美好时光。</p>
<p>4.我们渴望过得有意义，渴望成为超越自身的宏伟事业的一部分，投入某种超越个人生活、能产生持久影响的事情中去，并为之做出贡献。</p>
<p>所有这些奖励的共同点在于，它们都是深度投入周围世界，如环境、他人、超越自身的宏伟事业和项目的途径。</p>
<h2 id="游戏，正在编织着一条关系链"><a href="#游戏，正在编织着一条关系链" class="headerlink" title="游戏，正在编织着一条关系链"></a>游戏，正在编织着一条关系链</h2><p>​        说了那么多关于积极心理学的东西，现在回到游戏本身，我非常认同游戏在建立社会连接这方面的积极作用，它能帮我们建立社交联系，最能建设乐观心态的视频游戏，恰好也是社交性最强的，两者并非巧合。我们对成功的一大渴望就是分享，用游戏来代替真正的互动交流并不完美，但它的确能让我们在太过繁忙、无法保持联系时跟扩展的家庭及朋友圈子来往。亲社会情感包括爱情、同情、钦佩和献身精神，都以他人为目标，但又能让自己感觉良好。一起玩游戏除了能带来这种通用型的社交好处，还能带来两种十分独特的亲社会情感：快乐尴尬和间接骄傲—纳奇斯，纳奇斯是依地语，指的是我们教导或指点的某人成功时，我们产生的骄傲爆棚感，它的排名仅次于“惊喜”和“自豪”。在玩游戏时指导朋友和家人会让我们开心，让我们感觉更亲密。如果并未帮助或鼓励别人，当他们成功时我们就不会感到骄傲爆棚，相反，大多会感到嫉妒和怨恨。游戏会产生一种特殊的“社会临场感”：因追求同样的目标、投入相同的活动而放大的“临场感”。玩家们互相认可，因为他们对自己在做什么、为什么做有着相同的理解。他们的行动对彼此来说是可以理解的、有意义的。越来越多的网络游戏玩家说，他们喜欢跟自己在现实生活里认识的人一起玩。年纪越轻，就越是这样。最近18岁以下的玩家有61%的游戏时间都在跟生活里认识的朋友和家人玩，而不是一个人玩或和陌生人玩。游戏，越来越多地成为编织在日常生活里的一条关键社交线索。</p>
<p>​        除了连接熟人，游戏也可以让陌生人联盟，为了把一群陌生人变成社群，必须遵循两个基本步骤：第一，培养陌生人之间的共同利益；第二，给他们机会和途径围绕这一利益开展交流和互动。每个社群成员都要理解社群的目标、接受实现这些目标的策略和实践。这种与陌生人共同交流和贡献的活动，会增加社会和谐度和个人幸福感的，这个世界就不会那么孤独。研究人员已经证明，哪怕每天只是跟亲切友好的陌生人共享短短几分钟的公共空间，也会让我们更为乐观，提高我们的自尊，让我们感到更安全，感觉和周围的环境联系紧密，帮助我们更享受自己的生活。达契尔·克特纳提出一种用于衡量共享环境社会福祉的数学方法，叫做“仁率”，它比较的是在特定时间段和特定地点，陌生人之间的总积极互动和总消极互动。比率越高，该空间的社会福祉越好，在那儿待过之后就越可能感到快乐；比率越低，该空间的社会福祉越低，如果在那儿待得太久，幸福感就会减少。以此为衡量，中国社会的仁率肯定是很低的。可能也正是在这样的社会环境下，广场舞才会如此普及，舞者快感是内啡肽与后叶催产素相结合，再加上迷走神经受到强烈刺激时带给我们的感受，即我们成为一起活动的群体中的一员，在音乐的节奏中“失去自我”的感觉。这是一种充满兴奋、心流涌动和喜爱之情的复杂感觉，很难通过其他途径体验到，广场舞自有其积极的社会意义。但团体舞蹈也让很多人觉得尴尬。从自我意识到社交焦虑，再到对一切群体活动的不屑，所有这一切都可能妨碍我们参加或享受跳舞，所以我们也多了一个看待广场舞的积极角度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然游戏不能代替现实生活，但游戏的一些设计规则若应用到现实中，确实会有不少积极因素。游戏的4大特征是目标、规则、反馈系统和自愿参加，书中提到的《家务战争》游戏，其神来之笔在于，它说服我们：是我们自己想做这些家务的。好像没谁愿意做家务，但是游戏机制的启动，这种主动性至少会持续一段时间。比如使用《耐克+》系统跑步，可以激发大家更好的参与并坚持运动。</p>
<p>最后，游戏也给组建有益的社群带来很多启发。在社交网络和社群中，参与人数是至关重要的，改变参与的人数，可以彻底改变它的性质。协作项目要做到活跃，需要必要的临界参与量。很多协作项目和众包项目很难吸引到足够多的人来参与，往往无疾而终。网络游戏和像facebook这种有趣的社交网络，能提供稳定的内在奖励流。它们是自发性质的空间，也就是为了单纯享受而访问的空间。它们的首要目的就是具有奖励性，而不是解决问题、完成工作。和严肃性项目不同，它们的首要设计目的就是为了鼓励、满足我们的情感渴望。因此，这一类项目吸引了我们的绝大部分在线参与度，也就是我们为一个或多个参与类网络贡献的个体及集体能力。但是严肃类群体项目，没有这种稳定的内在奖励流和自发性质，应该借鉴多人游戏的机制来吸引人。维基百科就是一个正面案例。首先，维基百科是一个良好的游戏世界。它的超大规模激起了我们的敬畏和惊奇感，它藤蔓错节的导航又鼓励了我们的好奇、探索和合作。其次，维基百科有着良好的游戏机制，玩家的行动有直接和明确的结果：编辑后的文章即刻显示在网站上，带给用户强有力的环境控制感。最后，维基百科拥有良好的游戏社群。良好的游戏社群要具备两个条件：丰富的积极社交互动以及集体努力的有意义背景，而维基百科两者都具备。我们需要一种可持续性更强的参与式经济，利用内在奖励来动员、鼓励参与者，而不是增加诱人的物质报酬，一来这些项目本就提供不了多少资金，二来对我们本来就享受其中的活动，报酬反而会削弱我们投入的动力。相信未来众包游戏将在我们实现民主、科学和人道主义目标的过程中扮演重要的角色，在中国可能愈加任重道远。</p>
<p>从游戏回到现实，我们人生中最紧迫的使命、也是地球上每个人都要承担的使命，是在清醒的每一刻里，全力以赴地深深地投入现实。</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>article</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog</title>
    <url>/2019/Blog/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9958afedbf6d60f702ebbc55e939868b8cd6799eea0c0f62e0938881b55f349c"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/2019/Docs/</url>
    <content><![CDATA[<h1 align="center">说明</h1>



<hr>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p> 利用了快速，简单且功能强大的博客框架  <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>  搭建</p>
<a id="more"></a>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>干净且优雅，文章内容美观易读</li>
<li>首页封面全屏平铺，扁平化设计，简洁又不失高大上</li>
<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>
<li>时间轴式的归档页</li>
<li>侧边栏可以点击显示或隐藏</li>
<li>支持文章置顶和文章打赏</li>
<li>支持文章字数和阅读时长统计</li>
<li>支持网易云音乐播放</li>
<li><code>TOC</code> 目录在文章页悬浮，跳转更方便</li>
<li><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>评论模块（推荐配合<code>leancloud</code>使用 <code>Valine</code>）</li>
<li>集成了不蒜子、百度统计、Google Analytics、CNZZ等统计功能</li>
</ol>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="插件-必备"><a href="#插件-必备" class="headerlink" title="插件(必备)"></a>插件(必备)</h3><ul>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a> 用于搜索 </li>
<li><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generate-feed</a> 用于生成RSS订阅 </li>
</ul>
<h3 id="插件-选配"><a href="#插件-选配" class="headerlink" title="插件(选配)"></a>插件(选配)</h3><ul>
<li><p><a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a> 用于文章置顶 </p>
</li>
<li><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a> 用于文章加密 </p>
</li>
<li><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer</a> 用于播放音乐 </p>
<p>更多插件请见 <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo插件市场</a> </p>
</li>
</ul>
<h2 id="框架外应用"><a href="#框架外应用" class="headerlink" title="框架外应用"></a>框架外应用</h2><ul>
<li><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>  :  领先的 BaaS 提供商,提供数据存储、文件存储、云引擎、容器、即时通讯、消息推送、短信、游戏云等多项服务 </li>
<li><a href="http://www.lofter.com/" target="_blank" rel="noopener">Lofter(乐乎)</a> ： 国内最优质的图片社交软件,你可以在LOFTER随意晒图,分享生活,也可以加入摄影、时尚、cosplay等上万个兴趣圈子 </li>
<li><a href="https://www.superbed.cn/" target="_blank" rel="noopener">聚合图床</a> ： 是一个聚合了十几个高速稳定外链的免费图床,免费图片上传,无限流量,无限外链,全网CDN,提供API和客户端上传图片,支持一键拖放上传即时预览 ，一键分发，多出备份</li>
</ul>
</br>
</br>
</br>
</br>
其他好玩，好看，好用的正在挖掘中，期望你能跟我一起探讨
</br>
</br>
</br>
</br>

<p><img src="https://pic.downk.cc/item/5e6de618e83c3a1e3adb7400.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
